,vulnerability,category,description,impact,likelihood,remediation,reference,severity,rating,cvss,database,source
1,Apache server-status Information Disclosure,Security misconfiguration,"The web server was detected using Apache server-status, which displays sensitive information about Apache server's status like processed requests, PID keys, server version and uptime.
<< describe application specific details>>","Malicious users could gather sensitive information about the web application such as Apache server's status like processed requests, PID keys, server version, uptime and/or  sensitive file locations and launch targeted attacks",,Disable this functionality if not required. Comment out the Location /server-status section from httpd.conf,http://cwe.mitre.org/data/definitions/200.html,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
2,Application Exposes Azure SAS URI,Broken Access Control,"Azure provides Shared Access Signature (SAS) URI for granting fine-grained access to storage objects. A Shared Access Signature (SAS) is a URI that allows user to specify what data to expose, and what permissions to put on those objects (SignedPermission), and for how long the SAS URI is valid (SignedExpiry), etc. SAS URI�s are critical and it is essential to protect them from unauthorized disclosure, but it was observed that the application provided access for <<unauthenticated>> attacker to Azure SAS URI.","An attacker who has unauthorized access to SAS URI, can use the same and authenticate to Azure <<Blob/File share/Queue/Table>> storage with <<Read/Write/Delete/List/Add/Create/Update/Process>> permissions. Additionally, the attacker would also gain knowledge of service version, signed resource types that are accessible with the account SAS URI. ",,"If its not necessary to expose SAS URI via application response, make sure to hide the SAS URI form end users.
Use a user delegation SAS to grant limited access to blob data to clients.
Keep in mind the principal of least privilege when assigning permission to SAS.
Have a revocation plan in place for any SAS that you issue to clients.
If a service SAS is not associated with a stored access policy, then set the expiry time to one hour or less.
Track how requests are authorized.","https://docs.microsoft.com/en-us/azure/storage/blobs/security-recommendations
https://docs.microsoft.com/en-us/azure/storage/common/security-baseline
https://cwe.mitre.org/data/definitions/284.html",High,8.1,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:L/A:L),Web,qt6gmb3C
3,Application Vulnerable to Clickjacking ,Security misconfiguration,"It was observed that the application does not explicitly prevent or deny �Clickjacking� style attacks. �Clickjacking�, also known as a ""UI redress attack"", is an attack that aims at �hijacking� mouse clicks from unaware end-users in order to perform a set of malicious actions on the target site. This is done by placing a transparent overlay on top of the legitimate site in order to capture all user activity.",An attacker may use this security flaw to invisibly load the application in a malicious website and subsequently trick a user into clicking a link or button that is invisibly hidden above the application�s legitimate link or button; so as to �trick� the user into performing unintended actions.,,"It is recommended to implement anti-Cross Frame Scripting (�CFS�) techniques to check if the application has been embedded in a third party website, before displaying the application. This is commonly known as �Frame Busting�.
Additionally, it is recommended to add the �X-Frame-Options� header to DENY or SAME ORGIN .
Also, one or more sources can be set for the frame-ancestors policy:
Content-Security-Policy: frame-ancestors source;","https://cwe.mitre.org/data/definitions/1021.html
https://www.owasp.org/index.php/Cross_Frame_Scripting 
https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet
https://capec.mitre.org/data/definitions/103.html",Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N),Web,qt6gmb3C
4,Two-Factor Authentication Bypass,Broken Authentication,"<<Describe the observation based on the context of the application. A Sample observation is mentioned below>>

It was observed that the OTP that is used for logging into the application could be tampered by an attacker to bypass second factor authentication. 
<< application specific - like An attacker could modify the request with his phone number and mail address and send the OTP to his phone.>>","A malicious user/attacker could use this vulnerability to gain unauthenticated access to the application and may be able to perform fraudulent actions, as well as gaining access to sensitive information.",,"<<Describe the recommendation based on the context of the application.>>
It is recommended to validate the email/phone number to ensure that One Time Password (OTP) is not sent to email addresses/phone numbers other than the legitimate one.","https://capec.mitre.org/data/definitions/115.html
https://cwe.mitre.org/data/definitions/288.html
https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication",Medium,6.4,(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L),Web,qt6gmb3C
5,"Authentication Bypass via Forceful 
Browsing",Broken Authentication,"Any user, including users who have not authenticated with the <<Specify your application name>> application, can gain access to the application functionality using a direct URL to the post authenticated page. 

<<Describe the observation based on the context of the application. >>","Files, pages, or functionality that are not protected by authentication checks may lead to unauthorized users or attackers performing tasks, or accessing information for which they are not authorized. This may include accessing privileged functions or sensitive information.",,"It is recommended to implement access controls (authentication and authorization) to manage and limit access to all restricted URLs, scripts or files to authorized users only and these controls should be implemented at the server side.","https://cwe.mitre.org/data/definitions/425.html 
https://cwe.mitre.org/data/definitions/288.html
https://owasp.org/www-community/attacks/Forced_browsing",High,7.5,(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N),Web,qt6gmb3C
6,AutoComplete not Disabled,Security misconfiguration,The application does not prevent the browser from permanently caching sensitive information such as the username and password.,"A malicious user who has access to the user's machine can extract the sensitive information from the browser's cache. Information, such as login credentials can be used to hijack a user's account.",,"It is recommended to disable autocomplete on sensitive input fields by adding the attribute �autocomplete=""off"" to the overall form tag or to the individual ""input"" fields. ","http://cwe.mitre.org/data/definitions/525.html
https://cwe.mitre.org/data/definitions/200.html",Low,2.7,(CVSS:3.0/AV:P/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:N),Web,qt6gmb3C
7,Base64 Encoding Supported,Security misconfiguration,It was observed that the application is using base64 encoding.�The signature in the form�is using base64 encoding that can be decoded easily by an attacker.,An attacker can easily decode base64 encode and can able to steal sensitive�information.�,,It is recommended to implement strong encryption techniques to transfer and store�sensitive information.�,https://cwe.mitre.org/data/definitions/311.html�,Low,2.6,(CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:N/A:N)�,Web,qt6gmb3C
8,BEAST Vulnerability,Security misconfiguration,"It was observed that the remote server is vulnerable to BEAST attack. The BEAST attack is a form of plaintext recovery where, given a large number of cipher texts, a portion of the plaintext can be recovered with a high probability due to the flawed generation of pseudorandom IV's in CBC ciphers used in TLS v1.0 and earlier.","An attacker who is able to send arbitrary HTTP requests on behalf of the user by controlling the user�s browser and have the ability to sniff the  HTTPS response, is then able to make guesses about what plaintext looks like. Although the attacker cannot decrypt any data, he can find out if his guesses are right or wrong. And with a large enough number of guesses, a significant amount of data can be uncovered.",,It is recommended to disable support for cryptographic protocols with known vulnerabilities and the server should enforce the use of latest stable version of TLS,https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
9,Brute Force on xmlrpc.php,Security misconfiguration,It was observed that the xmlrpc.php file is enabled for the application and could potentially be used for brute force attack.,An attacker can use it for brute force attack to steal admin credentials. This can also be automated and be used to cause DDOS on victim.,,It is recommended to disable the xmlrpc.php and removed completely to avoid any potential risks.,"https://cwe.mitre.org/data/definitions/521.html
https://cwe.mitre.org/data/definitions/307.html
https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html#Step_3.29_Send_a_Token_Over_a_Side-Channel",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L),Web,qt6gmb3C
10,Business Logic Bypass,Security misconfiguration,"Business logic vulnerabilities are flaws in the design and implementation of an application that allow an attacker to elicit unintended behaviour. This potentially enables attackers to manipulate legitimate functionality to achieve a malicious goal. Logic flaws are often invisible to people who aren't explicitly looking for them as they typically won't be exposed by normal use of the application. However, an attacker may be able to exploit behavioural quirks by interacting with the application in ways that developers never intended.

<<Application specific  like - The application has disabled the changing of assigned email id in the case assignment module. However, the same can be modified by client side editing of the source code of the application. >>",Bypassing the business logic checks can assist attackers in breaking the company policies and may also result in financial/credibility�loss to the company.�,,It is recommended to implement proper server-side validation of user inputs and conditions against the standard company policies.�,"https://owasp.org/www-community/vulnerabilities/Business_logic_vulnerability�
https://cwe.mitre.org/data/definitions/840.html",medium,5.4,(CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N),Web,qt6gmb3C
11,Cacheable HTTP Response,Security misconfiguration,"It was observed that the application does not disable browser content storage features, and therefore, sensitive information contained within web pages may be stored on a user�s computer.�","An attacker will be able to access files containing sensitive information from the temporary cache of the browser.�Information cached by the web browser might be disclosed to attackers that gain remote or local access to a user's computer, allowing them to obtain sensitive information or information that might aid in additional attacks against the organization.�",,"It is recommended that the server impose directives that prevent caching of sensitive information. The following HTTP cache-control headers should be set:�
Cache-Control: no-cache, no-store 

Pragma: no-cache 

Expires: -1 ","https://cwe.mitre.org/data/definitions/525.html�
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses�",Low,2.9,(CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N)�,Web,qt6gmb3C
12,Change Password Functionality Accessible Directly,Broken Authentication,"It was observed that the ""Change Password"" functionality of the application could be accessible without the standard authentication (login credentials) and thereby change the password of the application. Since the application accepts weak password such as ""password1"", ""password2"" as �current password�, it makes an attacker easy to guess the current password in use.","Functionalities that are not protected by authorization checks may lead to unauthorized users or attackers performing tasks, or accessing information for which they are not authorized.",,"It is recommended that the access control should be enforced on all restricted URLs, scripts or files based on the permissions of the current user and access should only be allowed after successful authentication.","https://www.owasp.org/index.php/Testing_for_weak_password_change_or_reset_functionalities_(OTG-AUTHN-009)
https://cwe.mitre.org/data/definitions/425.html
https://cwe.mitre.org/data/definitions/620.html",Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
13,Clear text transmission of sensitive information ,Sensitive data exposure,"The web application does not utilise HTTP over Transport Layer Security, commonly referred to as HTTPS. As a result, all traffic transmitted between a client and the server is in clear text. 
HTTPS provides a number of important security considerations to protect a client and the server. Besides providing encryption to protect the confidentiality of data, HTTPS also provides authentication of the communicating parties and integrity of the data they are transmitting.
","Failure to use HTTPS allows an attacker to perform a number of alternative attacks against clients such as:
? Disclosure of sensitive information � HTTPS utilises encryption to provide confidentiality to any data that is transmitted between the client and server. Without HTTPS, information may be disclosed to anyone monitoring connections, but also logged and stored in various locations such as browsers, proxies or firewalls.
? Impersonating the legitimate site - without HTTPS, the legitimate server has no way of authenticating themselves to a connecting client. A digital certificate allows a connecting client to verify that the server they are connecting to, has been verified by an external third party. An attacker may set up an identical site and pose as <<Client Name>>, with no way for the legitimate site to verify its identity.
? Tampering with data whilst in transit - HTTPS protects against man in the middle attacks and without it, allow an attacker intercepting or monitoring communications to arbitrarily modify what is being presented to the client.
",,Enforce encryption (HTTPS/TLS) on all application pages to prevent the clear text transmission of credentials and sensitive information. ,"https://cwe.mitre.org/data/definitions/319.html
https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html
https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_SSL_TLS_Ciphers_Insufficient_Transport_Layer_Protection.html

",High,8,(CVSS:3.0/AV:A/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H),Web,qt6gmb3C
14,Client Side Template Injection,Unvalidated Input,"It was observed that the application is vulnerable to Client-Side Template Injection by which application dynamically embed user input into the web page.
HTML injection occurs when user data is supplied without sanitized or the output is not encoded. Here the application uses AngularJS framework, so whenever user supplies template expression in the input context. it is getting executed at client side (CSTI).","An attacker could inject malicious template directives and execute on the client side.

An attacker can exploit this by supplying a malicious template expression that launches a cross-site scripting (XSS) attack. As with normal cross-site scripting, the attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.",,"It is recommended to avoid using server-side code to dynamically embed user input into client-side templates. If this is not practical, filter out template expression syntax from user input prior to embedding it within client-side templates.",https://portswigger.net/kb/issues/00200308_client-side-template-injection,Low,2.6,(CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:N/A:L),Web,qt6gmb3C
15,Concurrent Logon Allowed ,Broken Authentication,It was observed that the web application does not restrict the number of concurrent login sessions for a single user account.,"Concurrent sessions increase the chances of a user being unable to detect whether his account has been compromised.  It also allows an attacker who has gained access once to perpetuate his session, as he will not be logged out upon a valid logon by a legitimate user.",,"It is recommended that the application should disable concurrent user logins. Once a new session is established, the older session should be terminated immediately.","https://www.owasp.org/index.php/Session_Management_Cheat_Sheet
https://cwe.mitre.org/data/definitions/557.html",Low,2.2,(CVSS:3.0/AV:L/AC:H/PR:L/UI:R/S:U/C:L/I:N/A:N),Web,qt6gmb3C
16,Content Spoofing via Text Injection,Unvalidated Input,The content of the application�s error pages can be manipulated through user input.,An attacker could exploit this vulnerability to modify the content of the application and reflect attacker�s content which could be used for targeted attacks such as Phishing attacks.,,It is recommended to configure a customized and generic error page to prevent any type of content spoofing through text injection.,"https://www.owasp.org/index.php/Content_Spoofing
https://capec.mitre.org/data/definitions/148.html",Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N),Web,qt6gmb3C
17,CORS (Cross-Origin Resource Sharing),Security misconfiguration,"The application does not validate cross origin resource sharing requests from another origin based on a allow list. Access is granted to any arbitrary domain based on the origin header.  
Cross origin resource sharing is a mechanism that allows restricted resources on web page to be requested from another domain outside the domain for which the resources originated.
","Improper CORS policy settings could aid an attacker in carrying out attacks exploiting cross origin resource sharing, such as CSRF attacks.",,"It is recommended allowing only selected, trusted domains in the ""Access-Control-Allow-Origin"" header. Prefer allowing trusted domains over blocking specific domains or allowing any domain (Do not use * wildcard nor blindly return the origin header content without any checks.)
Also it is recommended to ensure that the CORS header only list trusted domain especially when credentials are allowed.
","https://www.owasp.org/index.php/CORS_OriginHeaderScrutiny
https://cwe.mitre.org/data/definitions/346.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
18,Cross Site Request Forgery (CSRF),Broken Authentication,It was observed that the web application is vulnerable to Cross Site Request Forgery attack. The application authorises user requests based on session identifiers only. No anti-CSRF (Cross-Site Request Forgery) protection was applied to the requests sent to the web server.,"Users may be tricked by attackers into performing unwanted operations in the application. This can be achieved by forcing their browsers to execute crafted links (e.g. link posted in a forum, or sent by email) while having an active session in the application. Since the session identifier is automatically sent by the victim's browser, the server will authorise the request and the operation will take effect without the user's awareness.",,"It is recommended to fix the CSRF vulnerability by modifying session management mechanisms and implementing additional, randomly generated tokens/nonce to be included in each HTTP request related to sensitive operations.
It is recommended to add a unique CSRF token into each and every HTTP request address and verify the CSRF token is valid before processing the request at the server side.","https://owasp.org/www-community/attacks/csrf
https://cwe.mitre.org/data/definitions/352.html",Medium,5.9,(CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:H/A:N),Web,qt6gmb3C
19,Cross Site Scripting - jQuery,Using components with known vulnerabilities,It was observed that the remote server uses jQuery 3.2.1 which is found to be vulnerable to DOM based cross site scripting (XSS).,"jQuery 3.2.1 has a Cross-site scripting (XSS) vulnerability where an application using location.hash to select elements, allows remote attackers to inject arbitrary web script or HTML via a crafted tag.
Document Object Model (DOM) based XSS vulnerabilities allow attackers to modify components of the DOM to maliciously control the flow of the client-side code. Attackers can execute scripts in a victim's browser to deface web sites, insert hostile content, redirect users, hijack the user's browser using malware, etc.
",,It is recommended that any installed software and/or services on the server should be regularly patched and upgraded to the latest version after the patches and software has been tested on development environment.,"https://cwe.mitre.org/data/definitions/937.html
https://cwe.mitre.org/data/definitions/79.html
",Medium,5.6,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L),Web,qt6gmb3C
20,Cross-Site Scripting (DOM),Unvalidated Input,"It was observed that the parameter �fname� and �lname� in profile update page of the application is vulnerable to DOM based cross-site scripting. The fname and lname fields are reflecting in the same page.
DOM-based XSS vulnerabilities usually arise when JavaScript takes data from an attacker-controllable source, such as the URL, and passes it to a sink that supports dynamic code execution, such as eval() or innerHTML. . A DOM cross site scripting is a type of cross site scripting attack wherein the attack payload is executed as a result of inserting payload to the DOM environment of the victim�s browser. The XSS payload is never sent to the server and is only executed in the client�s browser.","An attacker could execute an arbitrary JavaScript code in the victim�s browser. This could allow can attacker to impersonate the user to the web application and can be a part of a phishing attack.
While the attacker would still need to force the user�s browsers to perform actions, it can still remain a possibility through exploitation of outdated plugins such as Flash, Java or Silverlight. ",,"Avoid using data received from the client for client-side sensitive actions such as rewriting or redirection.
Sanitize client-side code by inspecting references to DOM objects that pose a threat, for example, URL, location, and referrer. This is especially important if DOM may be modified.","https://owasp.org/www-community/attacks/DOM_Based_XSS
https://cwe.mitre.org/data/definitions/79.html",Medium,4.6,(CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:L),Web,qt6gmb3C
21,Cross-site scripting (Reflected),Unvalidated Input,"<<Re-phrase the observation based on the context of the application. A Sample observation is mentioned below>>
It was observed that the parameter 'searchCondition� in search field within the application is found to be vulnerable to reflected cross site scripting (XSS).

","Code injected via XSS allows an attacker to perform a variety of actions in the context of the victim�s browser. These actions may include:
? Steal the authentication credentials or session information of the victim, and use it to assume that user�s identity (via theft of session cookies or other identifying parameters).
? Perform unauthorized actions within a compromised user's session
? Track the attacked user�s operations on the web site.
? Transfer the unsuspecting user to a phishing site (fake site).
? Display various messages to the user to intimidate or mislead.
? Change the design of the vulnerable page(s).
? Deliver client-side exploits (i.e. browser exploits).
                                                                  OR
XSS attacks allow attackers to inject arbitrary scripts into the web pages that are subsequently displayed to other users.
Attackers can leverage XSS attacks to steal a user's session ID, perform actions on their behalf or to carry out  phishing attacks.  

It is possible to execute malicious code on the application user�s browser by luring authenticated users to access the application through pre-crafted links to vulnerable application pages via social engineering/spear phishing, which enable the input sent to them to be executed in their browsers. ",,"It is recommended that all input data within the website should be adequately scanned for potentially malicious script content. General protection measures against XSS include sanitizing all user input for potential XSS character sequences. The preferred method is to have a defined white-list of allowed characters and inputs for each input field type. This action should restrict user input to only those characters that are necessary for a given input field. This list should prohibit the use of any special characters which could be used to attempt scripting (e.g., << >> ( ) % # @ etc.). While the white-list approach is the most effective defence against cross site scripting, it is not always a practical solution for some applications. 
                                                           OR
User Input should be properly sanitized and filtered both at the client and sever side. Dangerous special character sets such as <<>> ' "" % ; ) ( & +  should either be disallowed or HTML encoded before displaying them on screen.
A framework-level implementation that covers  the entire application in order to prevent recurring XSS attacks from occurring in the web application","https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)
https://cwe.mitre.org/data/definitions/79.html
",Medium,6.3,(CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:L/A:N),Web,qt6gmb3C
22,CSV Injection in File Upload Functionality,Unvalidated input,"It was noted that the �Upload numbers� and �Upload statuses� functionalities in ""New Campaign"" module of the <<Client Name application>> are vulnerable to reflected CSV injection.
Comma Separated Values (CSV) files are commonly used for the plain text storage of tabular data. Because of their prominence as tabular storage, spreadsheet software (such as Microsoft Office Excel, Libre Office Calc and OpenOffice Calc) often accepts CSV as a file format and will process CSV files. Whilst a CSV file in-of-itself cannot be malicious (as it is a plain text file), modern spreadsheet software contains advanced processing functionality via the use of formulae which can be abused to carry out client-side attacks.
Reflected CSV injection occurs when request parameters are processed by the server without performing validation and reflected back in the subsequent server response without encoding or escaping. Reflected CSV injection vulnerabilities allow for the insertion of malicious formulae into a CSV file which is subsequently executed via end user action; clicking on a specially crafted CSV file with spreadsheet software.
","An attacker can use this vulnerability to exploit the inherit trust of an end-user in the application and its data. Successful exploitation of this vulnerability may allow for an attacker to:
? Infect end users with viruses or malware
? Gain control over an end-users computer and execute operating system commands
? Steal sensitive information
? Forge, spoof or modify data that appears to be generated by the server
",,"Redesign the export functionality to retrieve data from the server side and not from untrusted user data in requests.
If user supplied data is required for functionality, implement the following mitigations:
? Reduce the data supplied by users in server requests to the absolute minimum to maintain functionality
? For all data that is taken from a POST request, validate data against a strict set of rules. Reject and do not process requests that do not meet validation rules. Rules to consider include:
? Defining an allow list of characters that are allowed as input (i.e. alpha numeric only). Specific to CSV injection, special characters that facilitate malicious formulae include equals (=), apostrophes (�), plus (+), minus (-), at (@) and vertical bar (|).
? Define a deny list of phases or strings that are known to be part of injection attacks, such as cmd, .exe and links.
? Define a maximum or expected length of data.
","https://owasp.org/www-community/attacks/CSV_Injection#:~:text=CSV%20Injection%2C%20also%20known%20as,the%20software%20as%20a%20formula.
https://cwe.mitre.org/data/definitions/1236.html",Medium,6.7,(CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:L),Web,qt6gmb3C
23,DEBUG method enabled,Security misconfiguration,"It was observed that application server supports DEBUG HTTP method. ASP.NET allows remote debugging of web applications, if configured to do so. By default, debugging is subject to access control and requires platform-level authentication. ","If an attacker can successfully start a remote debugging session, this is likely to disclose sensitive information about the web application and supporting infrastructure that may be valuable in formulating targeted attacks against the system.",,It is recommended to disable all unnecessary HTTP methods on the server. The server response should return �501 � Method Not implemented� in order to fully disable support for that method. ,"https://docs.microsoft.com/en-us/troubleshoot/aspnet/disable-debugging-application
https://cwe.mitre.org/data/definitions/11.html",medium,4.2,(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N),Web,qt6gmb3C
24,Default Credentials in use,Security misconfiguration,"It was possible to login to the application via easily guessable default credentials.
<<Re-phrase the observation based on the context of the application. A Sample observation is mentioned above>>",Unauthorised users or an attacker can gain access to another user account using default credential which leads to compromise of critical information and infrastructure and also to loss of business reputation.,,"It is recommended that default credentials should be changed and only strong passwords complying with <<Client Name>> standards used. Additionally, if the application is Internet facing, access to ��admin�� or equivalent accounts should be restricted to only internal IPs.","https://cwe.mitre.org/data/definitions/255.html
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials",High,8.2,(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N),Web,qt6gmb3C
25,Directory Enumeration via Server response ,Security misconfiguration,It is possible to enumerate certain directories on the application.,"The ability to enumerate directories could allow an attacker to locate directories in the web server�s directories that are normally not exposed through links on the web site, potentially resulting in disclosure of sensitive information.",,"It is recommended not to disclose information about the existence or non-existence of folders on the server.
In an attempt to access a folder on the server, a generic response must be returned in a case of folder exists or does not exist on the server.
It is recommended to generate generic error response code to all directories on the web server. In addition, hidden directories should be removed if they are not required or obfuscated with a 404-Not found server response","https://cwe.mitre.org/data/definitions/203.html
https://cwe.mitre.org/data/definitions/204.html
https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
26,Directory Listing Enabled on Server,Security misconfiguration,It was observed that it is possible to list the contents of certain directories on the application.,"The ability to list the contents of directories could allow an attacker to locate files in the web server�s directories that are normally not exposed through links on the web site, potentially resulting in disclosure of sensitive information.",,"It is recommended to disable directory listing of all directories on the web server. In addition, hidden directories should be removed if they are not required or obfuscated with a 404-Not found server response.","https://cwe.mitre.org/data/definitions/548.html
https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration
",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
27,F5 BIG-IP Cookie Remote Information Disclosure,Security misconfiguration,"The remote host appears to be an F5 BIG-IP load balancer. The load balancer encodes the IP address of the actual web server that it is acting on behalf of within a cookie. Additionally, information after 'BIGipServer' is configured by the user and may be the logical name of the device. These values may disclose sensitive information, such as internal IP addresses and names.","Discovering the internal IP addresses used within organization can help an internal/external attacker in carrying out network-layer attacks aiming to penetrate the Organization�s internal infrastructure. Also, with several hostnames, once can figure out the naming convention and extrapolate to further targets. It provides attackers with information about potential internal targets that can be targeted before they need to breach the network",,It is recommended to encrypt the cookies.,"http://cwe.mitre.org/data/definitions/200.html
https://support.f5.com/csp/article/K14784 
http://www.systemadvise.com/2016/11/f5-big-ip-cookie-remote-information.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
28,Form Replay Attack,Security misconfiguration,The application does not implement a rate limiting functionality when submitting a form. The same form with the same parameters can be submitted multiple times to fill up the database and create an issue with availability.,"Attackers can deny services to legitimate users through automatic attacks to flood fake form submissions and prevent the relevant personnel from handling legitimate user requests. Additionally, resources may be consumed to the point where they are exhausted and unable to function properly.",,Implement CAPTCHA in all publicly executed features (such as forms) to prevent automatic attacks from abusing application functionality. Implement user-based API rate limiting as per <<client-name>>�s policy.,http://projects.webappsec.org/w/page/13246938/Insufficient%20Antiautomation,Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L),Web,qt6gmb3C
29,Guessable User id in use ,Security misconfiguration,It was observed that the user ids of user accounts are easily guessable and consecutive in nature.,An attacker with any user's ID knowledge could guess other user�s entity ID and could gain access/retrieve sensitive information pertaining to another user.,,Application should not use incremental/guessable numbers as user IDs. It should use unique random strings instead.,https://wiki.owasp.org/index.php/Testing_for_User_Enumeration_and_Guessable_User_Account_(OWASP-AT-002),Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
30,Host Header Injection,Security misconfiguration,It was observed that the web application implicitly trusts the Host headers in HTTP requests without properly validating or escape it properly.,"If the input is not properly escaped or validated, the host header is a potential vector for exploiting a range of other vulnerabilities, most notably:
?	Web cache poisoning
?	Business logic flaws in specific functionality
?	Routing-based SSRF
?	Classic server-side vulnerabilities, such as SQL injection",,"It is recommended that the web application should be configured to ensure proper validation of Host Header in the incoming HTTP requests.
Furthermore, it is highly advised to make use of a allow list of trusted hostnames.
The web application should use the SERVER_NAME instead of the Host header","https://cwe.mitre.org/data/definitions/20.html
https://www.acunetix.com/vulnerabilities/web/host-header-attack/
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
31,HSTS Header not implemented ,Broken Authentication,"It was observed that the application does not implement the HTTP Strict Transport Security (HSTS) header, which instructs the web browser to always load the site over HTTPS in order to mitigate the SSL stripping attack. The web browser also disallow the user from overriding certificate error warnings if this header is present.","An attacker can potentially perform SSL stripping attacks, a type of downgrade attack that is implemented as part of a Man-In-The-Middle attack, on the application. The SSL stripping attack forces a victim's browser to communicate with the application server in plain-text without HTTP encryption, allowing an attacker to intercept session management information and potentially hijack the session.",,"It is recommended to implement and enforce HTTPS for the entire site and add the following header to all HTTPS responses using the web/application server configuration (preferred) or by setting it using global code and filters:
Strict-Transport-Security max-age=31536000; includeSubDomains
We also recommend disabling HTTP access for the entire site.
","https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
https://cwe.mitre.org/data/definitions/523.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
32,HTTP Method Interchange,Security misconfiguration,"It was observed that the remote server is vulnerable to method interchange attack i.e., the server accepts user credentials even after changing the POST request for sending user credentials to GET request.",An attacker could conduct man-in-the-middle attacks to capture valid user credentials and gain unauthorized access to the application. Sensitive data transferred via HTTP GET method could get cached in the browser and upstream proxy servers.,,It is recommended that the application should be configured to ensure that form submission is done only through HTTP POST request.,https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.html,Low,2.9,(CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
33,Improper CAPTCHA Implementation,Security misconfiguration,"It was observed that CAPTCHA (Completely Automated Public Turing test to tell Computers and Humans Apart) was not properly implemented in the << login console >> of the application.�

<<Re-phrase the observation based on the context of the application. A Sample observation is mentioned above>>

It is possible to login to the application without providing CAPTCHA or providing random numbers as CAPTCHA",An attacker could bypass the intended protection of CAPTCHA challenge and could launch attacks to compromise the system.,,It is recommended to properly implement CAPTCHA in the application.,"https://www.owasp.org/index.php/Testing_for_Captcha_(OWASP-AT-012)
https://owasp.org/www-project-automated-threats-to-web-applications/assets/oats/EN/OAT-009_CAPTCHA_Defeat
https://blog.securelayer7.net/owasp-top-10-insufficient-attack-protection-7-captcha-bypass/
https://cwe.mitre.org/data/definitions/863.html",Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N),Web,qt6gmb3C
34,Improper CSRF Token Implementation ,Security misconfiguration,"It was observed that the application implements CSRF token in an improper manner. CSRF token could be reused for sending multiple requests, defeating the purpose of CSRF protection.","Cross-Site Request Forgery (""CSRF"") is an attack that allows a malicious attacker to perform unauthorized actions without the owner's knowledge through a separate web page. This attack is possible due to non-unique requests made by the application which could be spoofed by another website.",,It is recommended to add a unique CSRF token into each and every HTTP request address and verify the CSRF token is valid before processing the request at the server side.,"http://cwe.mitre.org/data/definitions/352.html
http://www.cgisecurity.com/csrf-faq.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N),Web,qt6gmb3C
35,Improper Implementation of Password Reset,Broken Authentication,It was observed that current password is not asked in the change password functionality within the application.,"When current password is not asked for password change functionality, an attacker who gets physical access to the victim system with and active session and change the password and takeover the account.",,It is recommended to implement current password validation when the user changes his password.,"https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html
https://cwe.mitre.org/data/definitions/640.html",Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L),Web,qt6gmb3C
36,Improper Logout Functionality,Broken Authentication,"It was observed that the application does not properly implement Logout functionality. Upon clicking the logout button, the application is not redirecting to the login page.","An attacker with physical access to the device could gain access to the active session of the user and perform malicious activities, obtain sensitive information etc.",,It is recommended to implement proper logout functionality in the application.,"https://www.owasp.org/index.php/Testing_for_logout_functionality_(OTG-SESS-006)
https://cwe.mitre.org/data/definitions/613.html",Low,2.7,(CVSS:3.0/AV:P/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:N),Web,qt6gmb3C
37,Improper OTP validation mechanism in use�,Broken Authentication,"It was observed that the OTP verification endpoint could be accessed without the initial authentication flow/page.
<<describe application specific>>",Improper validation of OTP can help attackers in bypassing MFA authentication thereby gaining full access to the application to perform unintended action.,,"Server response parameters must not be viable to tampering attacks. OTP validation should be performed on the server side. Responses must not bear data that can be easily forged to bypass verifications.
Also, Server should follow proper workflow at the server side and OTP should be mapped with the users","https://cheatsheetseries.owasp.org/cheatsheets/Transaction_Authorization_Cheat_Sheet.html�
https://cwe.mitre.org/data/definitions/288.htm",Medium,5.9�(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:L)�,,Web,qt6gmb3C
38,Session not invalidated after logout,Broken Authentication,It was observed that the application does not terminate the sessions properly. Application functionalities can be accessed even after the logout process. The users can access the application functionalities using the same�session�token created during login.�,Session not invalidated after logout can increase the risk of unauthorised application access in the case where authenticated users leave their workstation for a longer�period of time.�,,"User�s session cookies should automatically be invalidated if the user initiates another session.� Idle and absolute session timeout values are dependent on how critical the web application and its data. As recommended by OWASP, idle timeouts ranges are 2-5 minutes for high-value applications and 15- 30 minutes for low risk applications.
Absolute session timeout values should be determined by the business use case and the critically of the web-application.
Extended session timeout values should be avoided unless justified from a business use case.  
It is recommended to configure the session timeout period based on <<Client Name>> security policy. ","https://www.owasp.org/index.php/Session_Management_Cheat_Sheet�
https://cwe.mitre.org/data/definitions/613.html�",Low,3.7�(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N)�,,Web,qt6gmb3C
39,Improper Session Timeout,Broken Authentication,"It was observed that the inactive session timeout for the web application is not adequate. After testing for about one hour, we concluded that the inactive session timeout was either not configured or longer than 1 hour.",An inactive long session timeout can increase the risk of unauthorised application access in the case where authenticated users leave their workstation for a longer period of time.,,It is recommended to configure the session timeout period based on <<Client Name>>�s security policy.,https://www.owasp.org/index.php/Session_Management_Cheat_Sheet,Medium,4.5,(CVSS:3.0/AV:P/AC:H/PR:L/UI:R/S:U/C:H/I:L/A:N),Web,qt6gmb3C
40,Information Disclosure ,Security misconfiguration,"The web application discloses sensitive information such as the exact server/framework type and version used. Disclosed sensitive information are mentioned below:
?  <<list>>","An attacker could determine vulnerabilities associated with the application framework/server version and launch platform-specific attacks.
By collecting information about internal network architecture and backend information, an attacker could leverage on his knowledge for further attacks.",,"It is recommended to remove all information like server or third party library types and versions from source code, URLS, error messages and comments.
It is recommended that the internal network architecture and backend information should not be revealed through error messages or HTML responses.

<<Specify the path where the information is disclosed based on the context of the application like HTTP response header, Source code, URLs, Comments etc.. >>",https://cwe.mitre.org/data/definitions/200.html,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
41,Information Exposure Through�HTTP Response,Sensitive data exposure,"The web application discloses sensitive information, such as <<username and password�of the logged in user>>, in the page�client-side code via HTTP response.�","An attacker could obtain the administrative user credentials by accessing the browser history of the user or intercepting the communication between the web browser and the Web application. The attacker may then compromise the confidentiality, integrity and availability of the information stored on the  Web application.���",,"It is recommended that all sensitive user information,�such as username�and password, should be hashed or encrypted at application level. If there is�a business need for the script to store user credentials in the source code, the username�and password should be obfuscated.��",https://cwe.mitre.org/data/definitions/540.html�,Medium,4.7,(CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:L)�,Web,qt6gmb3C
42,Insecure Direct Object Reference,Broken access control,"It was noted that a malicious user could gain to access the sensitive information of various users by manipulating the parameters �<<Parameter Name>>""
IDOR will occur due to the following reasons:
?The application reveals a direct reference to an internal resource or operation.
?The user is able to manipulate a URL or form parameter to modify the direct reference.
?The application grants access to the internal object without checking if the user is authorized.",The lack of proper access control results in a breach in security permissions and could allow an attacker to gain access to confidential information or unauthorized functions.,,"It is recommended that the application should not use incremental numbers to reference objects like users, files etc. It is recommended to use a unique hash generated using strong hashing algorithms like SHA512 or above to create object identifiers instead of numbers.
It should be ensured that legitimate users have access to only those functions and data they are authorized to access. These controls should be implemented at the server side.",https://cwe.mitre.org/data/definitions/264.html,Medium,5.3,(CVSS:3.0/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:N),Web,qt6gmb3C
43,Improper Access Control,Broken access control,"It was observed that a low privileged user could perform unauthorized activities including accessing, modification, deletion, etc., of data on the application which is restricted to high privileged users.�
Additionally it was also observed that an malicious user could gain access to functionalities belonging to another user with a similar level of access/privileges. ",The lack of backend access rights enforcement results in a breach in security permissions assigned to a user and could allow him to gain access to confidential information or unauthorized functions.��,,"It is recommended to implement adequate access controls (authentication and authorization) to manage and limit access to all restricted URLs, functions, scripts or files. It should be ensured that authenticated users have access to only those functions and data they are authorized to access. These controls should be implemented at the server side.�
It is recommended to implement an access control mechanism at object level to ensure users can only access the objects they are authorized to.��","https://cwe.mitre.org/data/definitions/284.html��
https://wiki.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)
https://cwe.mitre.org/data/definitions/269.html ",High,7.1,(CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N)�,Web,qt6gmb3C
44,Lack of Input Validation ,Unvalidated input,It was observed that the application accepts invalid characters as a input in the request.  ,"Lack of input validation at server-side may cause issues with business logic and may also affect the accuracy of data.
�����������������������������������������������������������������������OR
In addition to above impact, depend on the context of the application you can add the following sentence: 

An attacker could further exploit similar instance to perform attacks such as cross site scripting",,It is recommended that proper input validations should be performed at both server and client side in accordance with <<Client Name>>�s policy and business logic.,https://cwe.mitre.org/data/definitions/20.html,Low,2.6,(CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:N/A:N),Web,qt6gmb3C
45,Internal Hostname/IP Revealed ,Sensitive data exposure,"The internal hostname/IP of the application server was revealed in the HTML response.
<< Note: - Rephrase the observation based on the context of your application >>","By collecting such information, an attacker could leverage on his knowledge of the network�s internal architecture for further attacks.",,It is recommended that the internal IP addresses should not be revealed and it should be replaced with the domain name of the site.,"https://cwe.mitre.org/data/definitions/200.html
",Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
46,Internal Path Disclosure,Sensitive data exposure,It was observed that the application is vulnerable to internal path disclosure within error messages.,An attacker could see the internal path and may abuse this information and use it in combination with other file inclusion vulnerabilities to steal configuration files regarding the web application.,,Remove all internal paths which reveals sensitive information.,https://cwe.mitre.org/data/definitions/200.html,Low,3.5,(CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N),Web,qt6gmb3C
47,Internet Accessible Administrative Interface ,Broken access control,"The administrative interface of the server is directly accessible over the internet allowing unauthenticated malicious users to perform targeted attacks against the administrative interface.
<< Note: - Rephrase the observation based on the context of your application >>","An attacker may perform credential enumeration attacks (such as brute force and dictionary attacks) and potentially impersonate users if valid credentials are discovered.
Attackers that obtain access to the administrative interface may assume complete control over the application, change application configuration settings, embed malicious code in the site pages to infect end-user or sabotage the system.
",,"It is recommended to disable the access to the administrative console from external network.
If it is required to be internet accessible, restrict access to administrative pages on a host based allow list or similar mechanism to limit the number of users able to access the page. 
","https://cwe.mitre.org/data/definitions/419.html
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
48,Invalid SSL Certificate,Broken Authentication,"It was observed that the SSL certificate used by <<Client Name>> web application  was expired, self-signed and the SSL certificate chain that has been signed using a cryptographically weak hashing algorithm (e.g. MD2, MD4, MD5, or SHA1). These signature algorithms are known to be vulnerable to collision attacks. ","An attacker can exploit this to generate another certificate with the same digital signature, allowing an attacker to masquerade as the affected service. When a certificate is invalid, it could allow an attacker to spoof a trusted entity by using a man-in-the-middle (MITM) attack. The web application could connect to a malicious host while believing it is a trusted host and could be deceived into accepting spoofed data that appears to originate from a trusted host",,Obtain and install a new SSL certificate issued from a trusted certificate authority to secure the communication between end-users and the web application.,"https://cwe.mitre.org/data/definitions/295.html
https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_SSL_TLS_Ciphers_Insufficient_Transport_Layer_Protection.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
49,Weak Change Password Implementation,Broken Authentication,"It was observed that the application fails to perform an authorization check when a user attempts to change another user�s password. 
Through request tampering, it was possible to change password of another user as the account number seems to be sequential. This makes it easier for a malicious user to guess and change passwords of other user accounts.  ",The vulnerability allows a malicious user to change any user�s password and gain access to the account. ,,"It is recommended to generate unique non-sequential account numbers. 
It is also recommended to implement appropriate authorization checks at server-side to ensure that users can only change their own password.  ",http://cwe.mitre.org/data/definitions/863.html,High,7.1,(CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N),Web,qt6gmb3C
50,Lack of Change password Functionality,Broken Authentication,The <<Specify the application>> application does not allow the user to change their password which may lead to unauthorized access to the application. ,"The longer users keep their passwords, the greater the chance that an attacker may determine their passwords through social engineering or dictionary attacks. Such information may also be sold on the dark web, which can lead to a case of significant user accounts being compromised at the same time.  
Furthermore, if an attacker is able to obtain the login credentials of a user, the account would remain compromised until the password is changed.  ",,It is recommended that a change password setting option is made available to the users of the <<Specify the application>> application and there should be a re-authentication mechanism before password change is processed.  ,"https://cwe.mitre.org/data/definitions/620.html
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities",Low,3.1�(CVSS:3.0/AV:A/AC:H/PR:H/UI:N/S:U/C:L/I:L/A:N)�,,Web,qt6gmb3C
51,Lack of Logout Functionality ,Security misconfiguration,It was observed that the application does not have a Logout functionality.,"An attacker with physical access to the device could gain access to the active session of the user and perform malicious activities, obtain sensitive information etc.",,It is recommended to implement logout functionality in the application.,"https://www.owasp.org/index.php/Testing_for_logout_functionality_(OTG-SESS-006)
https://cwe.mitre.org/data/definitions/613.html",Low,1.8,(CVSS:3.0/AV:P/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N),Web,qt6gmb3C
52,Lack of Rate Limiting,Insufficient Logging & Monitoring,It was observed that <<�Name of functionality�>> functionality lacks rate limiting protection allowing for making large number of requests in a limited amount of time without any exemptions being thrown.,"Lack of rate limiting could impact server performance, leading to Denial of Service (DoS), populating the database with fraudulent data, but also leaves the door open to authentication flaws such as brute force.",,It is recommended to implement rate-limit throttling which allows requests to the application be made until a certain limit has been reached for a specific time period. By utilizing rate-limit throttling within application can help to ensure that the database isn�t overwhelmed by one particular client who may be misusing the interface.,"https://apisecurity.io/encyclopedia/content/owasp/api4-lack-of-resources-and-rate-limiting.htm
https://cwe.mitre.org/data/definitions/770.html",Low,3.7,(,Web,qt6gmb3C
53,Lack of Server-Side Validation,Unvalidated input,"The application search functionality only allows to search for policy details if proper policy numbers or other relevant data are provided in the search fields. However, the check on the search parameters such as �clientCode� are only performed on the client-side.
<< Note: - Rephrase the observation based on the context of your application >>","Server-side requests with blank parameter values expose details of all the clients and their policy details without need for knowing any policy number or client code, which can expose sensitive information such as client email IDs and policy details.
<< Note: - Rephrase the observation based on the context of your application >>",,Proper server-side validation of parameters must be performed on top of the client side validation of search parameters.,"https://cwe.mitre.org/data/definitions/20.html
https://cwe.mitre.org/data/definitions/602.html",Low,3.5,(CVSS:3.0/AV:A/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N),Web,qt6gmb3C
54,Malformed XML Injection [Web Service],Unvalidated Input,It was observed that crafted XML user-controllable input is accepted in the application. ,"An attacker could gain unauthorized access to data, bypassing authentication or  the front-end application for direct XML database access, and possibly alter database information.  ",,It is recommended that all user-controllable input must be validated and filtered for invalid characters as well as content that can be interpreted in the context of an XML data or a query.,"https://cwe.mitre.org/data/definitions/91.html 
https://www.owasp.org/index.php/XML_Security_Cheat_Sheet",Medium,5.1,(CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N),Web,qt6gmb3C
55,Malicious File Upload,Broken access control,"It was observed that the web application is not configured to check the type and extension of the files which are uploaded onto the server. 
Though file type and extension checks have been implemented at the web browser (i.e. client side), this could be bypassed by intercepting the request using a proxy tool. Additionally, the Online Portal does not scan the files being uploaded to detect the presence of malware. 
It was possible to upload a dummy infected file (referred to as anti-malware test file) onto the application server. This increases the risk of Online Portal being compromised due to an inappropriate or infected file being upload on the portal
<< Note: - Rephrase the observation based on the context of your application >>",An attacker may exploit this vulnerability to upload malware or any other active content that could be executed to compromise the application. Furthermore the application server may be used as a file hosting server to conduct further attacks.,,"Implement code to perform server-side checks on the type and content of all files uploaded to the server before they are processed. Client side checks may also be implemented to increase application response. However, client side checks should always be backed by server-side code. 
Define a white-list of accepted file extensions. Generate a list of expected file extensions and configure the web application not to process files that do not match listed extensions. 
Use a file type recogniser and/or virus scanners to inspect the contents of an uploaded file. Files that appear to have dangerous content should be stopped and rejected.
","https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload    
http://cwe.mitre.org/data/definitions/434.html   
",Medium,5,(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L),Web,qt6gmb3C
56,Missing HTTP Security Headers,Security misconfiguration,"It was observed that the following HTTP header is missing in the application:
?	Content-Security-Policy: 
The �Content-Security-Policy� header, determines the type of resources and the origin of resources that the browser is allowed to load. This prevents untrusted content from being executed on the user browser.
?	X-XSS-Protection: 
The X-XSS-Protection response header is a mechanism supported by some web browsers to provide an additional layer of defense against reflected cross-site scripting attacks. The browser will either sanitize the malicious script or block the page from rendering when it receives the X-XSS-Protection header in a response.
?	X-Content-Type-Options: 
The X-Content-Type-Options header is a mechanism which prevents a web browser from overriding the MIME type indicated in the application's Content-Type response header.
?	HTTP Strict Transport Security (HSTS): 
The HTTP Strict Transport Security (HSTS) Header instructs the web browser to always load the site over HTTPS in order to mitigate the SSL stripping attack. The web browser also disallow the user from overriding certificate error warnings if this header is present.
?	Cache-Control Headers: 
The application does not disable browser content storage features, and therefore, sensitive information contained within web pages may be stored on a user�s computer. An attacker will be able to access files containing sensitive information from the temporary cache of the browser.
?	X-Frame-Options: 
The  application does not explicitly prevent or deny �Clickjacking� style attacks. �Clickjacking�, also known as a ""UI redress attack"", is an attack that aims at �hijacking� mouse clicks from unaware end-users in order to perform a set of malicious actions on the target site. This is done by placing a transparent overlay on top of the legitimate site in order to capture all user activity","?	Content-Security-Policy: 
A web browser that supports CSP, such as Chrome or Firefox, parses the header information and determines which sources are trusted or not based on the instruction sent in the header. This is basically an allow list approach which may consist of instructions like self (allowing inline scripts), specific domains, nonces or hashes that have to be present and valid in order for the content to be loaded. CSP can prevent cross-site scripting vulnerabilities, clickjacking, mixed content security issues, protocol downgrading and any other kind of code injection which is the result of the injection of untrusted content into a trusted resource�
?	X-XSS-Protection: 
A successful reflected cross-site scripting attack can inject a script to be executed in the victim's browser and there by fully compromising the user. The ""X-XSS-Protection"" header forces the XSS protection mechanism into Enable mode, even if disabled by the user. It acts as an additional layer of protection and reduces exposure to drive-by XSS attacks.
?	X-Content-Type-Options: 
MIME type sniffing is a standard functionality in browsers to find an appropriate way to render data where the HTTP headers sent by the server are either inconclusive or missing. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the intended content type. When the X-Content-Type-Options header is specified by an application, browsers will not perform MIME sniffing and will trust the Content-Type specified by the application.
?	HTTP Strict Transport Security (HSTS): 
Applications that do not utilize the ""HTTP Strict-Transport Security"" policy are more susceptible to SSL stripping attacks, a type of downgrade attack that is implemented as part of a Man-In-The-Middle attack, on the application. The SSL stripping attack forces a victim's browser to communicate with the application server in plain-text without HTTP encryption, allowing an attacker to intercept session management information and potentially hijack the session and exposing sensitive information and gaining access to unauthorized functionality.
?	Cache-Control:
Information cached by the web browser might be disclosed to attackers that gain remote or local access to a user's computer, allowing them to obtain sensitive information or information that might aid in additional attacks against the organization.
?	X-Frame-Options:
An attacker may use this security flaw to invisibly load the application in a malicious website and subsequently trick a user into clicking a link or button that is invisibly hidden above the application�s legitimate link or button; so as to �trick� the user into performing unintended actions. An attacker can perform Clickjacking attacks.",,"?	Content-Security-Policy: 
We recommend to set the Content-Security-Policy (CSP) header in each HTTP response with the appropriate directives defined to provide the browser with granular control over the resources loaded by the application. Please note that the directives ""unsafe-inline"", ""unsafe-eval"", ""data"" are considered insecure and must be used with extreme caution. 
The best practice is to implement CSP with following tags: 
Content-Security-Policy: default-src 'none'; script-src 'self'; connect-src 'self'; 
img-src 'self'; style-src 'self';   
Additionally, the usage of X-Content-Security-Policy is deprecated and is not recommended as the implementation is incomplete and not supported by all browsers.
?	X-XSS-Protection: 
We recommend the server to send the �X-XSS-Protection� header with the value �1� i.e. Enabled) on all outgoing responses. 
X-XSS-Protection: 1; mode=block 
?	X-Content-Type-Options:
We recommend to set the ""X-Content-Type-Options"" header to ""nosniff"" in the response. The X-Content-Type-Options header is a mechanism which prevents a web browser from overriding the MIME type indicated in the application's Content-Type response header. 
X-Content-Type-Options: nosniff
?	HTTP Strict-Transport-Security (HSTS):
We recommend to implement and enforce HTTPS for the entire site and add the following header to all HTTPS responses using the web/application server configuration (preferred) or by setting it using global code and filters:
Strict-Transport-Security max-age=31536000; includeSubDomains
?	X-Frame-Option:
We recommend implementing anti-Cross Frame Scripting (�CFS�) techniques to check if the application has been embedded in a third party website, before displaying the application. This is commonly known as �Frame Busting�. Additionally, it is recommended to add the �X-Frame-Options� header to the HTTP      response.
?	Cache-Control Headers: 
We recommend that the server impose directives that prevent caching of sensitive information. The following HTTP cache-control headers should be set:
Cache-Control: no-cache, no-store
Pragma: no-cache
Expires: -1",https://owasp.org/www-project-secure-headers/,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
57,Multi Factor Authentication (MFA) not implemented for sensitive actions,Broken Authentication,"While testing the payment function, it was noted that a user can complete the transaction by simply filling in the account information and no authentication is required.","If multifactor authentication is not implemented on important functions like payment etc. If an attacker get a victim�s account somewhere, they will be able to make unauthorized payments on this page using victim�s account.",,It is recommended that MFA such as validation email should be implemented on important functions such as payment function to authenticate the user.,"https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html
https://cwe.mitre.org/data/definitions/308.html
https://cwe.mitre.org/data/definitions/654.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N),Web,qt6gmb3C
58,No Account Lockout,Broken Authentication,The application does not enforce an account lockout after 5 or more failed login attempts.,"When multiple failed login attempts do not cause a user account to be locked out, an attacker may be able to use brute forcing techniques to discover valid logon credentials.",,It is recommended to enforce account lockout requirements that are in accordance with <<Client Name>>�s Security policy.,"https://cwe.mitre.org/data/definitions/307.html
https://owasp.org/www-community/controls/Blocking_Brute_Force_Attacks
",Medium,6.5,(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N),Web,qt6gmb3C
59,No Email/SMS Verification of User after Registration,Security misconfiguration,It was observed that application did not implement Email/SMS verification after user registration to verify if the email/phone number is used by the genuine user.,"An attacker can register the account using random/victims� email and can perform malicious activities like use the account for fraud activities like ordering bulk specs, exploit business related vulnerabilities like brute forcing on coupon codes or exploiting other discounts/offers applicable for newly registered user and exploit other security related vulnerabilities using victim account such as DOS on particular services.",,"After registration, verify the user by sending unique registration code to the registered email/mobile and provide access to the application only after user verifying the registration code. Also, do not allow emails from temporary email services, example https://temp-mail.org/en/",https://cwe.mitre.org/data/definitions/345.html,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N),Web,qt6gmb3C
60,NTLMv1 supported,Using components with known vulnerabilities,The application allows authentication through NTLMv1 which is an outdated legacy authentication method.,NT LAN Manager (NTLM) authentication is a challenge-response scheme that is a secure variation of Digest authentication. NTLM uses Windows credentials to transform the challenge data instead of the unencoded username and password. NTLMv1 authentication method uses weaker encryption that is easier to crack.,,It is recommended to disable NTLMv1 authentication in the affected instances.,https://www.cvedetails.com/cve/CVE-2018-1139/,Medium,5.9,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N),Web,qt6gmb3C
61,Insufficient Session Expiration,Broken Authentication,"It was observed that the inactive session timeout for the web application is not adequate. After testing for about one hour, we concluded that the inactive session timeout was either not configured or longer than 1 hour. ",An inactive long session timeout can increase the risk of unauthorised application access in the case where authenticated users leave their workstation for a longer period of time.,,"It is recommended to configure the session timeout period based on <<Client Name>>�s security policy.

Remarks: Additional information for SESSION TIMEOUT

? Idle and absolute session timeout values are dependent on how critical the web application and its data. As recommended by OWASP, idle timeouts ranges are 2-5 minutes for high-value applications and 15- 30 minutes for low risk applications.  
? Absolute session timeout values should be determined by the business use case and the critically of the web-application. 
? Extended session timeout values should be avoided unless justified from a business use case. 
? User�s session cookies should automatically be invalidated if the user initiates another session.  ",https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html,Medium,4.5,(CVSS:3.0/AV:P/AC:H/PR:L/UI:R/S:U/C:H/I:L/A:N),Web,qt6gmb3C
62,OpenSSL Padding Oracle vulnerability,Security misconfiguration,We noted that the host is vulnerable to OpenSSL padding oracle vulnerability.,"The AES-NI implementation in OpenSSL before 1.0.1t and 1.0.2 before 1.0.2h does not consider memory allocation during a certain padding check, which allows remote attackers to obtain sensitive clear text information via a padding-oracle attack against an AES CBC session. This vulnerability exists because of an incorrect fix for CVE2013-0169.",,It is recommended that OpenSSL should be upgraded to a version that is not vulnerable to such attack.,https://nvd.nist.gov/vuln/detail/CVE-2016-2107,Medium,5.9,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N),Web,qt6gmb3C
63,OTP Implementation Flaw,Security misconfiguration,It was noted that the OTP is valid even after 5 minutes. It was also noted that same OTP is issued multiple times if not used for login.,"An attacker with access to user�s mobile phone/physical device could obtain OTP and thereby gain unauthorised access to user account. Any malicious third-party application running on victim�s device with ""READ_SMS"" permission can remotely send the sensitive details to the rogue server.",,It is recommended that application must implement proper expiry to the OTP and reissue OTP values on each request.,"https://cheatsheetseries.owasp.org/cheatsheets/Transaction_Authorization_Cheat_Sheet.html 
https://cwe.mitre.org/data/definitions/840.html",Low,3.6,(CVSS:3.0/AV:L/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N),Web,qt6gmb3C
64,OTP returned in response,Security misconfiguration," 
We noted the OTP being sent to the mobile number was also returned in the HTTP response. A client side validation is also noted for the OTP.  
","A malicious user is able to send multiple complaint/enquiry forms using a fake phone number or impersonating another user, as the application validates the OTP provided in the HTTP response. This could result in a flooding of enquiry/complaint forms generated for the <<Client Name>> team to handle, and they will not be able to differentiate between real and fake requests. This might cause them to make unnecessary calls to people whose number has been misused and causing reputational damage to <<Client Name>>. It could also cause a delay in them reacting to the real requests, which might cause a loss of business, if the potential customer needs an answer in a timely manner.    
In addition, an attacker may make use of automated scripts to repeatedly populate and submit the forms in order to flood back-end systems with large amounts of nonsensical data. This may cause a Denial of Service (DoS) scenario by exhausting the resources required to process the form submissions and prevent the system from handling legitimate requests.",,"It is recommended that OTP be removed from the HTTP response to prevent impersonation or automated form submission attacks. In addition, OTP validation should be performed on the server side. User inputs fields should not be trusted.  ","https://cheatsheetseries.owasp.org/cheatsheets/Transaction_Authorization_Cheat_Sheet.html 
https://cwe.mitre.org/data/definitions/840.html",Medium,5.3,(CVSS:3.0/AV:L/AC:H/PR:N/UI:R/S:U/C:H/I:L/A:N),Web,qt6gmb3C
65,Missing PATH Attribute,Security misconfiguration,It was observed that the �Path� attribute for Cookies is set incorrectly. Setting the 'Path' attribute to �/� denotes that the cookie is set to the root directory. This could allow an attacker to grab the authentication cookie sent to every application under the same domain.,"When the cookie is set to the root directory, the cookie is shared with all the directories present under the root directory (representing all application on that server). An attacker could exploit this vulnerability by stealing the cookie which is present by exploiting any other application or directories in that root directory.",,It is recommended that 'Path' attribute is set to the directory in which the application is present.,"https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#Domain_and_Path_Attributes
https://cwe.mitre.org/data/definitions/565.html",Low,3.4,(CVSS:3.0/AV:A/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N),Web,qt6gmb3C
66,Path Traversal,Broken access control,"The application does not perform input validation to prevent manipulation of parameters with �dot-dot-slash (../)� sequences and does not restrict the directories accessible by users, allowing an attacker to traverse out of the folder and obtain files from other parts of the file system, also known as path traversal. It is possible to access arbitrary files and directories stored on file system including /etc, /proc folders, the database configuration and critical system files. It should be noted that access to files is limited by system operational access control.

It was observed that through script tampering, unauthenticated users were able to write articles and edit, delete and cancel without permission. 
","An attacker can leverage this vulnerability to get into the root directory and access other parts of the file system. This might give the attacker the ability to view restricted files, potentially containing sensitive information. Arbitrary file download increases the likelihood that a malicious user can gain access to the system via downloading sensitive system information and files.
The application fails to perform an authorization check when an attacker attempts to access a restricted resource or perform an action. This allows attackers to bypass intended access restrictions. Unauthorized users can view/add/change/delete pages, which can infringe the service.
",,Remove or redesign the affected pages to include input validation for restricting access to a certain application specific folder and implement controls to prevent a user from being able to traverse out of this folder. ,"https://owasp.org/www-community/attacks/Path_Traversal
http://cwe.mitre.org/data/definitions/22.html
",High,9.9,(CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H),Web,qt6gmb3C
67,Reflected File Download,Unvalidated Input,"It was observed that application allows attacker to craft request with RFD (Reflected File Download) payload in URL and force the browser to initiate a download of a dynamically generated malicious file, which does not originally exist on the domain. ",Reflected File Download allows an attacker to gain complete access over a user�s machine using the dynamically created malicious file which gets downloaded on to the user�s system.,,"It is recommended that the web application enforce the Content-Disposition header with a filename attribute, to prevent modification of the name of the downloaded file, and support to path parameters (;) must be disabled.
It is also recommended to avoid including user inputs in API usage error responses and set the X-Content-Type-Options: nosniff header and allow only trusted JSONP callbacks.",https://cwe.mitre.org/data/definitions/494.html,Low,2.9,(CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:N),Web,qt6gmb3C
68,HTML Code Injection,Unvalidated Input,"It was observed the application allows user to input HTML code into the application and a malicious user could leverage this to create fake phishing pages and could trick the intended users to access the malicious which would be inside the context of the application. In addition to phishing, the malicious user could also create html shell codes and could compromise the application.","An attacker may leverage this issue to inject arbitrary HTML code into a vulnerable web page and could lead to consequences such as phishing, malicious code execution etc.",,"It is recommended to validate if the user should be allowed to create and edit HTML content. If it is a business purpose, the content should be accessible to external users only after necessary approvals and proper access control should be enforced.","https://cwe.mitre.org/data/definitions/80.html
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection",Medium,4.2,(CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N),Web,qt6gmb3C
69,Buffer Overflow,Unvalidated Input,It was observed that the application is susceptible to buffer overflow attacks as it doesn�t limit the length of characters accepted by the input fields in the application. ,"By sending carefully crafted input to a web application, an attacker can cause the web application to execute arbitrary code � effectively taking over the machine.",,It is recommended that the application should limit length of acceptable characters to prevent the application from buffer overflow attack,https://cwe.mitre.org/data/definitions/120.html,Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L),Web,qt6gmb3C
70,Privilege Escalation,Broken access control,"Although the application has an access management mechanism, it was observed that a malicious user could bypass the access controls and perform unauthorized activities including modification, deletion, and refund, etc. in context of other users.","The lack of backend access rights enforcement results in a breach in security permissions assigned to a user, and could allow him to gain access to confidential information or unauthorized functions.",,"It is recommended to implement adequate access controls (authentication and authorization) to manage and limit access to all restricted URLs, functions, scripts or files. It should be ensured that authenticated users have access to only those functions and data they are authorized to access. These controls should be implemented at the server side.",https://cwe.mitre.org/data/definitions/264.html,High,7.7,(CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N),Web,qt6gmb3C
71,Reflected Self Cross-Site Scripting (Reflected Self-XSS),Unvalidated Input,It was observed that user input to the �Search box� in the home page of the application is accepted without any sanitization and is reflected in the HTML of the page.,"The victim of the attack can unknowingly run malicious code in the �Search box�  in their own web browser, thus exposing personal information to the attacker.",,"User Input should be properly sanitized and filtered both at the client and server side. Dangerous special character sets such as <<>> ' "" % ; ) ( & +  should either be disallowed, or HTML encoded before displaying them on screen.","https://cwe.mitre.org/data/definitions/87.html
https://cwe.mitre.org/data/definitions/79.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N),Web,qt6gmb3C
72,Sensitive Information Cached to Browser Local Storage ,Security misconfiguration,"It was observed that application stores sensitive information such as customer id, email id, first name, last name , account status etc in clear text to browser local storage. The application does not clear the sensitive data after closing the browser or logging out.",An attacker will be able to access sensitive information from the browser local storage.,,"It is recommended recommend not to use browser local storage to store sensitive information.
It is also recommended to use encryption for securing sensitive data both in transit and at rest.",https://cwe.mitre.org/data/definitions/525.html,Medium,4.3,(CVSS:3.0/AV:P/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N),Web,qt6gmb3C
73,Sensitive Information Passed Over GET Request ,Sensitive data exposure,"It was observed that the web server uses the GET method to process requests that contain sensitive information including birthdate, gender and occupation, which can expose that information through the browser�s history, Referrers, web logs, and other sources.","Any parameters passed in GET requests are both cached by the browser, and saved in web server log files, making it easy for unauthorized users to discover sensitive information. An attacker could conduct man-in-the-middle attacks to gain unauthorized access to the web application. Unauthorised users or an attacker can gain access to another user account using publicly exposed credentials which leads to compromise of critical information and infrastructure and also to loss of business reputation.",,It is recommended that the web application should be configured to ensure that form submission and transfer of sensitive data are done only through HTTP POST request. ,"https://owasp-aasvs.readthedocs.io/en/latest/requirement-9.3.html
https://cwe.mitre.org/data/definitions/598.html
https://cwe.mitre.org/data/definitions/200.html
",Medium,4.7,(CVSS:3.0/AV:L/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N),Web,qt6gmb3C
74,Sensitive Data Exposure,Sensitive data exposure,It was observed that the application displays sensitive information such as user�s Resident registration number in full on screen. The user�s Resident registration number is a Personally Identifiable Information (PII) that can be used to identify Korean citizens. ,Unmasked sensitive information is prone to shoulder surfing type of attacks and can be misused. ,,It is recommended that sensitive information such as user�s Resident registration number should be masked ('*') to prevent shoulder-surfing type of attacks. The masking should be applied within all functions. ,https://cwe.mitre.org/data/definitions/312.html ,Low,2.4,(CVSS:3.0/AV:P/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
75,Web Server Banner Revealed,Security misconfiguration,The web application discloses sensitive information such as the exact server type and version used.,"This information can help an attacker gain a greater understanding of the systems in use and potentially develop further attacks targeted at the specific version of software revealed in the header part of the response.
An attacker might use the disclosed information to harvest specific security vulnerabilities for the version identified.",,"It is recommended to remove all information like server type and version from the HTTP header response.
Specify the path where the information is disclosed based on the context of the application like HTTP response header, Source code, URLs, Comments etc.. ",https://cwe.mitre.org/data/definitions/200.html,Informational,0,,Web,qt6gmb3C
76,Server Side Template Injection (SSTI),Unvalidated Input,"It was observed that the application is vulnerable to Server Side Template Injection and user-controlled inputs can be embedded into a server-side template, allowing users to inject template directives. ",An attacker could inject malicious template directives and possibly execute arbitrary code on the affected server.,,It is recommended that templates should not be created from user-controlled input. User input should be passed to the template using template parameters.,"https://cwe.mitre.org/data/definitions/116.html
https://www.acunetix.com/vulnerabilities/web/server-side-template-injection/

",Medium,5.3,(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
77,Server-Side JavaScript code injection,Unvalidated Input,"It was observed that the subset parameter is vulnerable to server-side JavaScript injection attacks. Submitted value is getting placed into a dynamically evaluated JavaScript statement, within a json object in a MongoDB query","An attacker can use crafted input to modify the code to be executed, and inject arbitrary code that will be executed by the server",,It is recommended avoiding incorporating user-controllable data into dynamically evaluated code. Use an allow list of specific accepted values should be used.,https://cwe.mitre.org/data/definitions/95.html,Medium,4.6,(CVSS:3.0/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L),Web,qt6gmb3C
78,Server-Side Request Forgery (SSRF),Unvalidated Input,We noted that it was possible to induce the application to perform server-side HTTP requests and DNS lookups of arbitrary domain names. ,"SSRF is an attack where a malicious attacker provides URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks which may provide greater control over the contents of requests.",,"It is recommended to review the purpose and intended use of the relevant application functionality, and determine whether the ability to trigger arbitrary external service interactions is intended behaviour.
If the ability to trigger arbitrary external service interactions is not intended behaviour, then you should implement an allow list of permitted services and hosts and block any interactions that do not appear on this allow list.

",https://cwe.mitre.org/data/definitions/918.html,Medium,4,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:N/A:N),Web,qt6gmb3C
79,Session Cookie Attributes are Set Incorrectly  ,Broken Authentication,"It was observed that the application does not have HTTPOnly flag set for its session cookies.

Session cookie for the application was not set with the �Secure� flag and may be sent in clear text when a user surfs to non-HTTPS links within the application. When a cookie is set without the �Secure"" flag, the browser can send the cookie unencrypted to the same domain.

It was also observed that the �Path� attribute for Cookies is set incorrectly. Setting the 'Path' attribute to �/� denotes that the cookie is set to the root directory. This could allow an attacker to grab the authentication cookie sent to every application under the same domain.

The expiry date of 'CC' cookie not set within an adequate amount of time which may allow unauthorised access to information such as Name and Email stored through the cookie on shared workstations.","If HTTPOnly flag is not set, an attacker can inject client-side scripts into the application, execute cross site scripting attacks and steal user session cookie. 

Not setting the secure flag causes the cookie to be transmitted in clear text. It may be possible for an attacker to exploit this issue to steal the session cookie.

When the cookie is set to the root directory, the cookie is shared with all the directories present under the root directory (representing all application on that server). An attacker could exploit this vulnerability by stealing the cookie which is present by exploiting any other application or directories in that root directory.

The lack of an adequate expiry date for the cookie may provide more time for an attacker to successfully perform attacks such as session hijacking. ",,"It is recommended that �HTTPOnly� flag should be set on all cookies that are used for transmitting sensitive Data.
It is recommended to mark all session ID cookies as �Secure� to ensure that cookies containing sensitive data are not sent in clear text. The �Secure� parameter is a flag indicating that a cookie should only be used under a secure server condition, such as SSL. This flag usually defaults to FALSE and needs to be set as TRUE.
It is recommended that 'Path' attribute is set to the directory in which the application is present. 
It is recommended that all cookies are configured to expire within an adequate amount of time according to <<Client Name>>'s security policy.","https://owasp.org/www-community/controls/SecureFlag
https://cwe.mitre.org/data/definitions/614.html
https://cwe.mitre.org/data/definitions/22.html
https://owasp.org/www-community/HTTPOnly
https://cwe.mitre.org/data/definitions/1004.html

",Low,3.7,(CVSS:3.0/AV:A/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N),Web,qt6gmb3C
80,Session Fixation,Broken Authentication,"The web server/application issues a session ID to an anonymous user accessing the application prior to authentication and retains the same session ID upon successful authentication.
By forcing a user to use a pre-determined session cookie to login, an attacker can resume that user�s authenticated session after he logs in by using that same session cookie.","If the session identifier is allocated before a successful authentication and retains the same session ID upon successful authentication, a malicious user can record the value of this token on the workstation and then hijack subsequent user sessions.",,It is recommended that the session cookie should be issued or changed after a user has successfully authenticated to the site.,"https://owasp.org/www-community/attacks/Session_fixation
https://cwe.mitre.org/data/definitions/384.html",Low,2.6,(CVSS:3.0/AV:A/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N),Web,qt6gmb3C
81,Spoofable�Client IP�Address,Security misconfiguration,It was observed that the server accepts IP address included X-Forward-For header as the valid client IP address and the IP address was displayed back in subsequent error message.,"The spoofed IP address can help an attacker to hide their true attacking address, generating misleading error message in the server.�",,"It is recommended that the server should�not rely on�HTTP request headers such as X-Forwarded-For, True-Client-IP, and X-Real-IP�to retrieve client IP address. An alternative method of identifying clients should be used.�",https://cwe.mitre.org/data/definitions/16.html�,Low,3.7�(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N)�,,Web,qt6gmb3C
82,SQL Injection (SQLi),Unvalidated Input,"It was observed that the <<parameter>> is vulnerable to SQL injection attack. The application constructs part of a SQL command using externally influenced input from the user. 
The application uses user inputs to create SQL queries that will be executed by a backend database server. 
<<Application related information like how far SQL injection could be exploited.>>","SQL injection can lead to number of serious consequences including bypass of authentication, loss of data, destruction of data etc. An attacker can inject SQL code to retrieve sensitive data stored in the database, find out the database structure, or to create, modify or remove data in the database. The attacker may even execute arbitrary OS commands on certain database servers that support such functionality, such as Microsoft SQL Server or MySQL Server.",,It is recommended using parameterized queries and prepared statements for database access.,"https://owasp.org/www-community/attacks/SQL_Injection
https://cwe.mitre.org/data/definitions/89.html
https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",High,8.2,(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N),Web,qt6gmb3C
83,Stored Cross-Site Scripting  (XSS),Unvalidated Input,"It was observed that the web application is vulnerable to Stored Cross Site Scripting (XSS) attacks. 

<<Describe the observation based on the context of the application>>

 Stored XSS occurs when a web application sends stored strings that were provided by an attacker to a victim's browser in such a way that the browser executes part of the string as code. The string contains malicious data and is initially stored server-side, often in the application's database. The application later retrieves the malicious data and inserts it into a web page. This results in the victim's browser executing the attacker's code within a legitimate user's session. ","Code injected via XSS allows an attacker to perform a variety of actions in the context of the victim�s browser. These actions may include:

Steal the authentication credentials or session information of the victim and use it to assume that user�s identity (via theft of session cookies or other identifying parameters).

Perform unauthorized actions within a compromised user's session

Track the attacked user�s operations on the web site.

Transfer the unsuspecting user to a phishing site (fake site).

Display various messages to the user to intimidate or mislead.

Change the design of the vulnerable page(s).

Deliver client-side exploits (i.e. browser exploits).",,"It is recommended that all input data within the website should be adequately scanned for potentially malicious script content. 
Stored Cross-Site Scripting (XSS) is prevented by encoding data before inserting it into the generated web page called as ""Output Encoding"". Output Encoding libraries exist for most popular programming languages and A web page has seven different output contexts and each output context requires a different encoding scheme. Data must be encoded using the proper scheme. 
Also, user input be sanitized and filtered both at the client and server side. Dangerous characters such as << >> ' "" % ; ) ( & + should either be disallowed or HTML encoded before displaying them on screen. In addition, we suggest a framework-level fix that covers the entire application in order to prevent recurring XSS attacks from occurring in the web application.
","https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)
https://owasp.org/www-community/attacks/xss/#stored-and-reflected-xss-attacks
https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",High,7.1,(CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N),Web,qt6gmb3C
84,Information disclosure through error messages,Security misconfiguration,"It was observed that the application exposes technical information through error messages.

<<Mention application specific information revealed and how it can be obtained>>","Detailed error messages allow an attacker to enumerate the exact cause of the error that is occurring and make it significantly easier to detect and exploit certain vulnerabilities. Based on the information revealed, an attacker can launch target specific attacks",,"Configure a customized and generic error page giving minimal information to the users.
Use a global error handler to capture all unhandled exceptions and which is only accessible to system/application administrators.
","https://cwe.mitre.org/data/definitions/209.html
https://owasp.org/www-community/Improper_Error_Handling
https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
85,Testing Environment Issues,Miscellaneous,"Some features in-scope of the testing could not be accessed due to environmental factors.
<< application specific issues like :
Creating a new quote for a new user, using an Advisor account 
Accessing OTP code for Client Complete 
 Using performing requote with requote user >>

","There might be potential vulnerabilities exist within the application, particularly within the component or any components rely on it that is not tested. ",,It is recommended that a full penetration test of the component be performed to ensure full coverage of the system/application. This may include additional penetration test on functionalities which could not be tested due to environment issues.,NA,High,Mention,the,Web,qt6gmb3C
86,Time based blind SQL injection ,Unvalidated Input,"It was observed that the <<parameter>> is vulnerable to time based blind SQL injection attack. The application constructs part of a SQL command using externally influenced input from the user. It was possible to observe time delay based on the user input.
<<Application related information like how far SQL injection could be exploited.>>","SQL injection can lead to number of serious consequences including bypass of authentication, loss of data, destruction of data etc. Similarly, an attacker can inject SQL code to retrieve sensitive data stored in the database, find out the database structure, or to create, modify or remove data in the database. The attacker may even execute arbitrary OS commands on certain database servers that support such functionality, such as Microsoft SQL Server or MySQL Server.",,"It is recommended using parameterized queries and prepared statements for database access. Also, the user input should be verified to ensure it is valid and in an expected data type and filter dangerous characters from user input.
","https://www.owasp.org/index.php/Blind_SQL_Injection
https://cwe.mitre.org/data/definitions/89.html
https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",High,8.2,(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N),Web,qt6gmb3C
87,TLS LUCKY13 Vulnerability,Broken Authentication,"It was observed that the remote server is vulnerable to LUCKY13 attack. The Lucky Thirteen attack is a cryptographic timing attack against implementations of the Transport Layer Security (TLS) protocol that use the CBC mode of operation.

The web server allows for clients to use TLS 1.2 protocol. The following deficiencies were also found in the encrypted communication configuration:
?	TLS LUCKY13 Vulnerability:
It was observed that the remote server is vulnerable to LUCKY13 attack. The TLS protocol 1.2 do not properly consider timing side-channel attacks on a MAC check requirement during the processing of malformed CBC padding. ",Attackers would measure the time it takes to encrypt records when using the standard CBC cipher suite used in TLS sessions. An attacker would then be able to recover plain text from TLS connections that use CBC mode encryption.,,"It is recommended to disable weak or low grade ciphers on the server.
Disable support for cryptographic protocols with known vulnerabilities and the server should enforce the use of latest stable version of TLS.","https://nvd.nist.gov/vuln/detail/CVE-2013-0169
https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",Low,3.1,(CVSS:3.0/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
88,TLS/SSL Implementation Flaws,Broken Authentication,"It was observed that the remote server allows for clients to use TLSv1.0, TLSv1.1 and TLSv1.2 protocols. The following deficiencies were also found in the encrypted communication configuration:
? ROBOT: 
The Return of Bleichenbacher's Oracle Threat (ROBOT) Attack is a variation of the 
classic Bleichenbacher attack against RSA - which is one of the encryption methods 
used by TLS. 
?	SWEET32 Vulnerability: 
SWEET32 uses collision or �birthday� attack against 64-bits DES/3DES ciphers in CBC mode to decrypt sensitive information like session cookie, by sending large amount of data over a single SSL/TLS session. The following weak 64-bit block ciphers were supported:
<<list the affected ciphers>>
?	Insecure Client-initiated Renegotiation:  
TLS renegotiation is a mechanism which allows the server or client to trigger a new handshake during an ongoing TLS connection, and has been identified with a design flaw that allows an attacker to inject data at the beginning of a connection, allowing the hijacking of the TLS connection and facilitating a man-in-the-middle attack.
?	LUCKY13
It was observed that the remote server is vulnerable to LUCKY13 attack. The Lucky Thirteen attack is a cryptographic timing attack against implementations of the Transport Layer Security (TLS) protocol that use the CBC mode of operation.	
?	Logjam:
The TLS protocol 1.2 and earlier, when a DHE_EXPORT cipher suite is enabled on a server but not on a client, does not properly convey a DHE_EXPORT choice, which allows man-in-the-middle attackers to conduct cipher-downgrade attacks by rewriting a ClientHello with DHE replaced by DHE_EXPORT and then rewriting a ServerHello with DHE_EXPORT replaced by DHE.
?	BREACH attack:
The application is potentially vulnerable to the BREACH attack (Browser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext) as the server supports the use of HTTP compression
?	Use of weak hashing algorithm
It was observed that the remote server uses weak hashing algorithm SHA1.","? ROBOT: 
A successful attack permits an attacker to decrypt the communication between a 
user and a server if this communication was encrypted with an RSA cipher. 
Furthermore, the attacker could create and sign any message using the server's 
private key. 
? SWEET32 Vulnerability: 
An attacker who can send arbitrary HTTP requests on behalf of the user by controlling the client  and can sniff the HTTPS response, is then able to decrypt one block of the encrypted message within 232 attacker-controlled requests.
? Insecure Client-initiated Renegotiation:
An attacker may be able to exploit the insecure renegotiation process to execute man-in-the-middle attacks by injecting an arbitrary amount of plaintext into the beginning of the conversation the client has with the server. The injected text could be used to compromise the integrity of the request submitted. 
In addition, the computational requirements for renegotiating a connection are asymmetrical between the client and the server, with more server utilization. Since the remote host does not appear to limit the number of renegotiations for a single TLS/SSL connection, this permits an attacker to open several simultaneous connections and repeatedly renegotiate them, possibly leading to a denial of service condition.
? LUCKY13:
Attackers would measure the time it takes to encrypt records when using the standard CBC cipher suite used in TLS sessions. An attacker would then be able to recover plain text from TLS connections that use CBC mode encryption.
? Logjam:
The Logjam attack allows a man-in-the-middle attacker to downgrade vulnerable TLS connections to 512-bit export-grade cryptography. This allows the attacker to read and modify any data passed over the connection. 
? BREACH attack:
An attacker who is able to inject chosen plaintext into the victim�s HTTP request can potentially extract login tokens, email addresses and other sensitive information from the compressed HTTPS response by observing the length of the compressed HTTPS responses.
? Use of weak hashing algorithm
If the client negotiates such a weak cipher suite, the whole communication can potentially be compromised by a cryptanalytic attack.",,"It is recommended to limit the number of client renegotiation attempts to an acceptable threshold which does not affect the server performance.
It is recommended to configure the server to disable client-initiated SSL renegotiation attempts.
It is recommended to disable support for cryptographic protocols with known vulnerabilities and the server should enforce the use of latest stable version of TLS. 
It is recommended that weak or low grade ciphers or encryption must be disabled on the server.
","https://cwe.mitre.org/data/definitions/310.html
https://nvd.nist.gov/vuln/detail/CVE-2013-0169
https://nvd.nist.gov/vuln/detail/CVE-2016-2183
https://netsparker.com/web-vulnerability-scanner/vulnerabilities/breach-attack-detected/
https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html
",Medium,4.8,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:L),Web,qt6gmb3C
89,Unauthenticated access to API calls,Broken Authentication,"It was observed that certain backend API calls can be performed without proper authentication tokens which expose sensitive information to un-verified users. <<please mention application specific data like This vulnerability found in the �componentsData� functionality helps an unauthenticated user to find email-ids, names of clients and policy history. >>",The vulnerability allows application users to gain an unauthorized access to APIs which exposes sensitive information. << specify application specific data >>Regulatory or reputational risk may be involved depending on sensitivity of the details gathered.,,"It is recommended to enforce proper authentication and authorization checks for every API call to prevent any malicious user from accessing sensitive information without the necessary access token. Also, token should be properly mapped with user so that it disallows any user from accessing other user�s data.","https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control
https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html",Medium,6.5,(CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N),Web,qt6gmb3C
90,Unnecessary HTTP methods enabled ,Security misconfiguration,"It was observed that remote server supports HTTP method like TRACE, PUT and DELETE << mention only applicable one>>
TRACE method is used to debug the web server connections and would return request header seen by the app server in the response body.","If the HTTP TRACE support is enabled in the web server, an attacker could create a webpage using XMLHTTP, ActiveX, or XMLDOM to cause a client to issue a TRACE request and capture the client's cookies. This effectively results in a Cross-Site tracing attack.
Leveraging the PUT method an attacker may be able to place arbitrary and potentially malicious content, into the system which may lead to remote code execution, defacing the site or denial of service.
",,It is recommended that all unnecessary HTTP methods be disabled on the server. The server response should return �501 - Not implemented� in order to fully disable support for that method.,"https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods
https://portswigger.net/kb/issues/00500a00_http-trace-method-is-enabled",Medium,4.2,(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N),Web,qt6gmb3C
91,Unsafe Content Security Policy (CSP) directive in use,Security misconfiguration,"CSP is a response header that instructs the web browser from what sources it is allowed to include and execute resources from. It is considered additional layer of protection against a XSS-vulnerability.
It was observed that the application implements Content Security Policy (CSP) with unsafe CSP directive �unsafe-inline� and �unsafe-eval�.",CSP with unsafe-inline and unsafe-eval directives allow an attacker to execute inline scripts and event handlers which could be used to exploit a XSS vulnerability.,,"It is recommended to remove unsafe-inline and unsafe-eval from CSP directives. The best practice is to implement CSP with following tags: 
Content-Security-Policy: default-src 'none'; script-src 'self'; connect-src 'self'; 
img-src 'self'; style-src 'self';   
","https://content-security-policy.com/ 
https://www.owasp.org/index.php/Content_Security_Policy_Cheat_Sheet
https://content-security-policy.com/unsafe-inline/",Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
92,Untrusted SSL certificates allowed,Security misconfiguration,"It was observed that the  application server certificate is not signed by a trusted root certificate or that the browser is not able to link that certificate with the trusted root certificate as the browser gives warning "" The site security certificate is not trusted"".","The security warnings associated with untrusted SSL Certificates drive away potential clients for fear that the website does not secure their credentials. Both brand reputation and customer trust are damaged.
If users choose to ignore these warnings and click through them, there will be no guarantee they are accessing the valid application or an impostor leaving them susceptible to Man-In-The-Middle (MITM) attacks.",,It is recommended to purchase or generate a certificate from a trusted certificate authority for the application server.,"https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html
",Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
93,URL Redirection not Validated,Security misconfiguration,"URL redirection, also known as URL forwarding, is executed by manipulating a parameter within a GET request or POST request, such that the site redirects to a malicious site instead of the intended internal/trusted link.
This vulnerability exists when client-side content redirects the user's browser to a URL that was constructed using untrusted data. This redirect may be initiated by client-side JavaScript or by the user clicking a link whose value has been set by an attacker-controlled parameter.
The <<Specify the  application>> application make use of the GET parameter <<mention the parameters - �target�, �redirect_uri� and  'forward_uri'>> to redirect the user to an external application, but does not perform sufficient validation on the parameter. This allows an attacker to craft links with external domains for the parameters <<mention the parameters - �target�, �redirect_uri� and 'forward_uri'>>, which will redirect users to the attacker controlled websites.
","An attacker can leverage the site to perform any number of malicious actions through URL redirection. For example, the attacker may use this site to run scripts that install malware on the victim's system. Also, it could be used for phishing attacks when a malicious user/attacker attempt to redirect users to malicious sites.",,It is recommended the creation of a URL �allow list' that can be used to perform proper checking of the parameter affected in order to ensure that the domain referenced in the URL is still within the web application.             ,"https://cwe.mitre.org/data/definitions/601.html
https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
",Low,2.6,(CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:N/A:N),Web,qt6gmb3C
94,User Controlled Error Message Displayed,Security misconfiguration,It was observed that the application displays default server error message which is vulnerable to content spoofing.,"When an application does not properly handle user supplied data, an attacker can supply content to a web application, typically via a parameter value, that is reflected back to the user. This presents the user with a modified page under the context of the trusted domain to trick users.",,It is recommended that to configure a customized and generic error page instead of reflecting the user input back in the page to prevent text-based content spoofing attacks. ,https://owasp.org/www-community/attacks/Content_Spoofing,Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N),Web,qt6gmb3C
95,Username enumeration,Security misconfiguration,"It was observed that the application allows valid username enumeration, as the response messages are different between two cases of username and invalid password in <<mention the page - login page and forgot password page functionality>>","Username enumeration provides an attacker with one of two pieces of information required to authenticate to the application. By automating guesses, an attacker is able to retrieve a large list of valid usernames for an application. Once the attacker has a list of valid usernames, they can begin guessing passwords in an attempt to steal credentials and impersonate other users",,"It is recommended that the <<password reset function and Login process>> follows a default flow that does not distinguish between valid/invalid username and password. An example response for all combinations of invalid credentials could be, ""The username and password entered do not match""","https://wiki.owasp.org/index.php/Testing_for_User_Enumeration_and_Guessable_User_Account_(OWASP-AT-002)
https://cwe.mitre.org/data/definitions/203.html
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
96,Vulnerable Version of Software in Use ,Using components with known vulnerabilities,"It was observed that the remote web server uses the following vulnerable third party library and server. 
? Mention the list of vulnerable version of framework/server
The vulnerable server/third party library are associated with various published vulnerabilities 
<< please mention related to the vulnerable version of software - including Cross Site Scripting, Code Execution, Directory Traversal that could be exploited by attackers.>>
",An attacker could determine vulnerabilities associated with the vulnerable software version and launch version-specific attacks.,,"It is recommended that any installed software and/or services on the server should be regularly patched and upgraded to the latest version, after the patches and software has been tested on development environment.","Mention the reference for the corresponding vulnerable version
",Medium,5.3,(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L),Web,qt6gmb3C
97,Forgot Password Implementation Flaws,Security misconfiguration,"It was observed that there are issues related to the implementation of forgot password functionality. The application is configured to send the same token over email to the user for every single password reset request. Also, the token has no expiry and can be used to reset password at any given point of time.","If an attacker compromises the password recovery email, can reset user�s password at any point in the future.�",,"It is recommended to assign a new password reset token for every password recovery request. Also, password reset tokens should automatically expire after a particular amount of time based on the company policy and after the issue of new password tokens.","https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html#Step_3.29_Send_a_Token_Over_a_Side-Channel
https://cwe.mitre.org/data/definitions/640.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
98,Weak Password Complexity Requirements ,Broken Authentication,"It was observed that the application does not enforce password complexity requirements for user passwords. The following password policy weaknesses were noted:
? Common words/sequences can be used
? Passwords without special characters
? Passwords without the combination of upper case and lower case
? Username and password found to be same
? Password history not enforced","Weak password complexity requirements makes the application vulnerable to password-guessing attacks, which may potentially lead to the compromise of the user accounts. Attackers that gain access to these user accounts may be able to perform fraudulent transactions, as well as gaining access to sensitive information.
                                                                          OR
If the application does not implement account lockout for login function, use the below Risk in the report:

Weak password complexity requirements makes the application vulnerable to brute-force attacks, which may potentially lead to the compromise of the user accounts. Attackers that gain access to these user accounts may be able to perform fraudulent actions, as well as gaining access to sensitive information.",,It is recommended that the application should enforce password complexity requirements that are in accordance with <<name>>�s password policy.,"http://cwe.mitre.org/data/definitions/521.html
https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html
",Medium,4.8,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:L),Web,qt6gmb3C
99,Weak Password Complexity Requirements (control bypass),Security misconfiguration,"Although the Web application has implemented complexity requirements during password change,  these requirements are only enforced at client side and can be bypassed due to lack of validation at server side.","Weak password complexity requirements makes the application vulnerable to brute-force attacks, which may potentially lead to the compromise of the user accounts. Attackers that gain access to these user accounts may be able to perform fraudulent actions, as well as gaining access to sensitive information.",,It is recommended that the application should enforce password complexity requirements that are in accordance with <<company's>> password policy and password change requests should be validated at server side.,"http://cwe.mitre.org/data/definitions/521.html
https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html
",Medium,4.2,(CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:L),Web,qt6gmb3C
100,Weak Password Hashing Algorithm Used,Security misconfiguration,"It was observed that a weak hashing algorithm, MD5 is in use for password hashing during login functionality, which can be broken easily.",An attacker with access to password hashes could retrieve the actual password by  brute forcing it using online tools that are easily available.,,It is recommended to implement salted password hashing methods.,https://cwe.mitre.org/data/definitions/522.html,Low,3.1,(CVSS:3.0/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
101,Weak Session Implementation Flaws ,Broken Authentication,"It was observed that the application was vulnerable to session related vulnerabilities such as session hijacking, no session timeout, concurrent logon improper session termination and session fixation.
? The web application is vulnerable to session hijacking which allows a malicious user to gain unauthorized access on behalf of a legitimate user.
? The web application does not restrict the number of concurrent login sessions for a single user account.
? Inactive session timeout for the application is not configured within an acceptable time-range. Even after being inactive for an hour, we concluded that the inactive session timeout was either not configured or configured for a period longer than one hour.
? The web application does not implement proper logout mechanism and allows access to the application and can perform functionalities via back button in the browser. Even if the application is logged out, within the session timeout period the functionality inside the application can be accessed via back button in the browser.
?  The web server/application issues a session ID to an anonymous user accessing the application prior to authentication and retains the same session ID upon successful authentication.

","An attacker could exploit these session related vulnerabilities and capture a valid user�s session id /URL information to gain the same level of access to information and privileges as that of the valid user.
Concurrent sessions increase the chances of a user being unable to detect whether his account has been compromised.  It also allows an attacker who has gained access once to perpetuate his session, as he will not be logged out upon a valid logon by a legitimate user.
An inactive long session timeout can increase the risk of unauthorised application access in the case where authenticated users leave their workstation for a longer period of time. 
A malicious user could access the application via clicking on the back button even after the actual user performs the logout function and does not close the browser within the session timeout period.
If the session identifier is allocated before a successful authentication and retains the same session ID upon successful authentication, a malicious user can record the value of this token on the workstation and then hijack subsequent user sessions.",,"It is recommended to implement an IP address check to match user�s cookie ID to his IP address. Upon logout or after a pre-defined session timeout, the session should be terminated at the server-side as well as deleting the session cookie at client-side.
It is recommended to ensure that session identifiers are transmitted only using the SSL session. Track sessions across SSL renegotiations and integrate with framework solutions to support common SSL termination/re-encryption architectures. 
It is recommended that the application should disable concurrent user logins.  Once a new session is established, the older session should be terminated immediately.
It is recommended to configure an adequate session timeout period based on <<Client Name>>'s security policy
It is recommended to verify if there is an application directory which allows the user to log back in to the application without authentication. 
It is recommended that the session cookie should be issued or changed after a user has successfully authenticated to the site.","https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html
https://owasp.org/www-community/attacks/Session_fixation",Medium,5.7,(CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N),Web,qt6gmb3C
102,Web Server Supports Basic Authentication over HTTP,Broken access control,It was observed that the web application supports the use of Basic Authentication scheme over HTTP which is affected by many inherent security flaws.,An attacker could intercept traffic between the client and server to review the Basic Auth header parameter. This header contains the user credentials encoded in Base64 and can be easily decoded to gain application credentials.,,Disable Basic authentication and use more secure method such as Form based authentication.,"https://www.acunetix.com/vulnerabilities/web/basic-authentication-over-http
https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html
https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/basic-authorization-over-http/
https://cwe.mitre.org/data/definitions/319.html
",Medium,5.3,(CVSS:3.0/AV:A/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N),Web,qt6gmb3C
103,WordPress Users Disclosure ,Security misconfiguration,WordPress users/author list were disclosed using the REST API /wp-json/wp/v2/users,"This behaviour is often harmless, since the WordPress login is exposed to internet, it could be used for brute-forcing user accounts. ",,Restrict the REST API only to admin users. Use WordPress plugins to disable the REST APIs,https://cwe.mitre.org/data/definitions/203.html,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
104,WordPress Username Enumeration,Security misconfiguration,It was observed that the application allows valid WordPress username enumeration via the internet exposed wp-json endpoint or by using opensource scanning tools like wpscan.,This aids an attacker in information gathering as he can build a list of valid user accounts that he could exploit subsequently.,,It is recommended that the application should hide WordPress usernames from response messages and implement mechanisms to obfuscate WordPress usernames from automated scanning tools.,"https://www.owasp.org/index.php/Testing_for_User_Enumeration_and_Guessable_User_Account_%28OWASP-AT-002%29
https://cwe.mitre.org/data/definitions/203.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
105,WSDL  Exposed over Internet [Web Service],Security misconfiguration,It was observed that the Web Service Definition Language was exposed over external network.  ,A malicious user could attack the web service if any sensitive information is available in the WSDL document.  ,,"It is recommended to remove the WSDL and the related files from the server. If WSDL is required, restrict its exposure over the Internet.  ",http://www.ws-attacks.org/index.php/WSDL_Disclosure,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),Web,qt6gmb3C
106,XML External Entity (XXE) Injection,Unvalidated Input,"An XML External Entity attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. 
<<Mention application specific details here>> ","This vulnerability allows an attacker to interfere with an application's processing of XML data. This attack may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the perspective of the machine where the parser is located, and other system impacts.",,The most effective way to prevent XXE attacks is to disable those dangerous XML features which application's XML parsing library supports. XML processor should be configured to use a local static DTD and disallow any declared DTD included in the XML document. ,"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing
https://portswigger.net/web-security/xxe",High,7.5,(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N),Web,qt6gmb3C
107,Clear text transmission of sensitive information ,Sensitive data exposure,"The web service does not utilise HTTP over Transport Layer Security, commonly referred to as HTTPS. As a result, all traffic transmitted between a client and the server is in clear text. 
HTTPS provides a number of important security considerations to protect a client and the server. Besides providing encryption to protect the confidentiality of data, HTTPS also provides authentication of the communicating parties and integrity of the data they are transmitting.
","Failure to use HTTPS allows an attacker to perform a number of alternative attacks against clients such as:
? Disclosure of sensitive information � HTTPS utilises encryption to provide confidentiality to any data that is transmitted between the client and server. Without HTTPS, information may be disclosed to anyone monitoring connections, but also logged and stored in various locations such as browsers, proxies or firewalls.
? Impersonating the legitimate site - without HTTPS, the legitimate server has no way of authenticating themselves to a connecting client. A digital certificate allows a connecting client to verify that the server they are connecting to, has been verified by an external third party. An attacker may set up an identical site and pose as <<Client Name>>, with no way for the legitimate site to verify its identity.
? Tampering with data whilst in transit - HTTPS protects against man in the middle attacks and without it, allow an attacker intercepting or monitoring communications to arbitrarily modify what is being presented to the client.
",,Enforce encryption (HTTPS/TLS) on all application pages to prevent the clear text transmission of credentials and sensitive information. ,"https://www.owasp.org/index.php/Top_10_2010-A9-Insufficient_Transport_Layer_Protection
https://www.owasp.org/index.php/SSL_Best_Practices
https://cwe.mitre.org/data/definitions/319.html
",High,8,(CVSS:3.0/AV:A/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H),API,qt6gmb3C
108,API supports Basic Authentication ,Broken Authentication,It was observed that the web service supports the use of Basic Authentication scheme which is affected by many inherent security flaws. ,An attacker could intercept traffic between the client and server to review the Basic Auth header parameter. This header contains the user credentials encoded in Base64 and can be easily decoded to gain application credentials. ,,Disable Basic Authentication and use more secure method such as Form Based Authentication. ,"https://www.acunetix.com/vulnerabilities/web/basic-authentication-over-http 
https://www.owasp.org/index.php/Basic_Authentication 
https://cwe.mitre.org/data/definitions/311.html 

 ",Medium,5.3,(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L),API,qt6gmb3C
109,Authentication Bypass ,Broken Authentication,It was observed that the authentication mechanism can be bypassed without providing a password. <<Explain in detail the finding specific to your web service>>,"A malicious user/attacker could use this vulnerability to gain unauthenticated access to the application and may be able to perform fraudulent actions, as well as gaining access to sensitive information. ",,"It is recommended to implement the password validation function properly. Allow login to the application only after verifying the password. 
It is recommended to implement proper server side and client-side validation of the password.  ","https://capec.mitre.org/data/definitions/115.html 
https://cwe.mitre.org/data/definitions/288.html ",High,7.4,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N),API,qt6gmb3C
110,Lack of Authentication mechanism,Broken Authentication,The backend APIs of the application accept both a self-signed client-side certificate or JWT token for authentication. The uses of self-sign client-side certificate is far less secure when compared to the use of a JWT token for the same which will require proper credentials from each user for session authentication.,Any malicious user with knowledge of the API call and its parameters can easily request sensitive information without any authorization or verification of authority.,,It is recommended to enforce authorization checks for every API Calls to prevent any malicious user from exposing sensitive information.,https://cwe.mitre.org/data/definitions/306.html,Low,3.5,(CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N),API,qt6gmb3C
111,CORS (Cross-Origin Resource Sharing) ,Security misconfiguration,The application does not validate cross origin resource sharing requests from another origin based on an allow list. Access is granted to any arbitrary domain based on the origin header. Cross origin resource sharing is a mechanism that allows restricted resources on web page to be requested from another domain outside the domain for which the resources originated. ,"Improper CORS policy settings could aid an attacker in carrying out attacks exploiting cross origin resource sharing, such as CSRF attacks. ",,"It is recommended allowing only selected, trusted domains in the ""Access-Control-Allow-Origin"" header. Prefer allowing trusted domains over blocking specific domains or allowing any domain (Do not use * wildcard nor blindly return the origin header content without any checks.)
Also it is recommended to ensure that the CORS header only list trusted domain especially when credentials are allowed.
","https://www.owasp.org/index.php/CORS_OriginHeaderScrutiny 
https://cwe.mitre.org/data/definitions/346.html ",Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N),API,qt6gmb3C
112,Host Header Injection,Security misconfiguration,It was observed that the web application accepts Host Headers in HTTP requests without properly validating them.,"If the input is not properly escaped or validated, the host header is a potential vector for exploiting a range of other vulnerabilities, most notably:
?	Web cache poisoning
?	Business logic flaws in specific functionality
?	Routing-based SSRF
?	Classic server-side vulnerabilities, such as SQL injection",,"It is recommended that the web application should be configured to ensure proper validation of Host Header in the incoming HTTP requests.
Furthermore, it is highly advised to make use of an allow list of trusted hostnames.","https://cwe.mitre.org/data/definitions/20.html
https://www.acunetix.com/vulnerabilities/web/host-header-attack/
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),API,qt6gmb3C
113,HSTS Header not implemented ,Security misconfiguration,"It was observed that the application does not implement the HTTP Strict Transport Security (HSTS) header, which instructs the web browser to always load the site over HTTPS in order to mitigate the SSL stripping attack. The web browser also disallows the user from overriding certificate error warnings if this header is present. ","An attacker can potentially perform SSL stripping attacks, a type of downgrade attack that is implemented as part of a Man-In-The-Middle attack, on the application. The SSL stripping attack forces a victim's browser to communicate with the application server in plain-text without HTTP encryption, allowing an attacker to intercept session management information and potentially hijack the session.",,"It is recommended to implement and enforce HTTPS for the entire site and add the following header to all HTTPS responses using the web/application server configuration (preferred) or by setting it using global code and filters: Strict-Transport-Security max-age=31536000; includeSubDomains 
It is recommended to disable HTTP access for the entire site.","https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
https://cwe.mitre.org/data/definitions/523.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),API,qt6gmb3C
114,Information Disclosure ,Security misconfiguration,"The web application discloses sensitive information such as the exact server/framework type and version used. Disclosed sensitive information are mentioned below:
?  list","An attacker could determine vulnerabilities associated with the application framework/server version and launch platform-specific attacks.
By collecting information about internal network architecture and backend information, an attacker could leverage on his knowledge for further attacks.",,"It is recommended to remove all information like server or third party library types and versions from source code, URLS, error messages and comments.
It is recommended that the internal network architecture and backend information should not be revealed through error messages or HTML responses.

Specify the path where the information is disclosed based on the context of the application like HTTP response header, Source code, URLs, Comments etc.. ",https://cwe.mitre.org/data/definitions/200.html,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),API,qt6gmb3C
115,Information Disclosure through Stack trace,Sensitive data exposure,It was observed that the application discloses sensitive backend information such as <<information displayed>> through a stack trace while displaying system generated error messages. A stack trace is a report of the active stack frames at a certain point in time during the execution of a program.,Detailed error messages allow an attacker to enumerate the exact cause of the error that is occurring and make it significantly easier to detect and exploit certain vulnerabilities.,,"It is recommended to display a custom error page giving minimal information to the users.
It is recommended to use a global error handler to capture all unhandled exceptions.  ","https://www.owasp.org/index.php/Information_Leak_(information_disclosure)
https://cwe.mitre.org/data/definitions/388.html
https://cwe.mitre.org/data/definitions/209.html",Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),API,qt6gmb3C
116,Insecure Direct Object Reference,Broken access control,"It was noted that a malicious user could gain to access the sensitive information of various users by manipulating the parameters �<<Parameter Name>>""
IDOR will occur due to the following reasons:
?The application reveals a direct reference to an internal resource or operation.
?The user is able to manipulate a URL or form parameter to modify the direct reference.
?The application grants access to the internal object without checking if the user is authorized.",The lack of proper access control results in a breach in security permissions and could allow an attacker to gain access to confidential information or unauthorized functions.,,"It is recommended that the application should not use incremental numbers to reference objects like users, files etc. It is recommended to use a unique hash generated using strong hashing algorithms like SHA512 or above to create object identifiers instead of numbers.
It should be ensured that legitimate users have access to only those functions and data they are authorized to access. These controls should be implemented at the server side.",https://cwe.mitre.org/data/definitions/264.html,Medium,5.3,(CVSS:3.0/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:N),API,qt6gmb3C
117,Insufficient Access Token Expiration,Security misconfiguration,"It was noted that the access token used in the web service is not adequate. After testing for about two hours, we concluded that the access token expiry was either not configured or longer than 1 hour. ",This weakness can increase the risk of unauthorised access in the case where authenticated users leave their workstation for a longer period of time.,,"It is recommended to configure the session timeout period based on <<client name>> security policy.

Remarks: Additional information for SESSION TIMEOUT

? Idle and absolute session timeout values are dependent on how critical the web application and its data. As recommended by OWASP, idle timeouts ranges are 2-5 minutes for high-value applications and 15- 30 minutes for low risk applications.  
? Absolute session timeout values should be determined by the business use case and the critically of the web-application. 
? Extended session timeout values should be avoided unless justified from a business use case. 
? User�s session cookies should automatically be invalidated if the user initiates another session.  ","https://www.owasp.org/index.php/Session_Management_Cheat_Sheet
https://cwe.mitre.org/data/definitions/613.html",Medium,4.7,(CVSS:3.0/AV:L/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N),API,qt6gmb3C
118,Insufficient Access Control,Broken access control,"It was observed that a low privileged user could perform unauthorized activities including <<accessing, modification, deletion,>> etc., of data on the application which is restricted to high privileged users.�
Additionally it was also observed that an malicious user could gain access to functionalities belonging to another user with a similar level of access/privileges. ",The lack of backend access rights enforcement results in a breach in security permissions assigned to a user and could allow him to gain access to confidential information or unauthorized functions.��,,"It is recommended to implement adequate access controls (authentication and authorization) to manage and limit access to all restricted URLs, functions, scripts or files. It should be ensured that authenticated users have access to only those functions and data they are authorized to access. These controls should be implemented at the server side.�
It is recommended to implement an access control mechanism at object level to ensure users can only access the objects they are authorized to.��","https://cwe.mitre.org/data/definitions/284.html��
https://wiki.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)
https://cwe.mitre.org/data/definitions/269.html ",High,7.1,(CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N)�,API,qt6gmb3C
119,Internal Hostname Disclosure ,Security misconfiguration,It was observed that the application discloses internal hostname of the application server through an error message. ,"By collecting such information, an attacker could leverage on his knowledge of the network�s internal architecture for further attacks. ",,It is recommended that the internal IP addresses or hostnames should not be revealed. It should be replaced with the domain name of the site or external server. ,"https://cwe.mitre.org/data/definitions/209.html 
https://cwe.mitre.org/data/definitions/200.html 

 ",Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N),API,qt6gmb3C
120,Internal IP Revealed,Security misconfiguration,"The internal IP address of the application server was revealed in the HTML response.
<< Note: - Rephrase the observation based on the context of your web service >>","By collecting such information, an attacker could leverage on his knowledge of the network�s internal architecture for further attacks.",,It is recommended that the internal IP addresses should not be revealed.  It should be replaced with the domain name of the site or external server. ,"https://cwe.mitre.org/data/definitions/200.html
https://www.owasp.org/index.php/Information_Leak_%28information_disclosure%29",Low,3.5,(CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N),API,qt6gmb3C
121,Lack of Rate Limiting,Insufficient Logging & Monitoring,It was observed that <<�Name of functionality�>> functionality lacks rate limiting protection allowing for making large number of requests in a limited amount of time without any exemptions being thrown.,"Lack of rate limiting could impact server performance, leading to Denial of Service (DoS), populating the database with fraudulent data, but also leaves the door open to authentication flaws such as brute force.",,It is recommended to implement rate-limit throttling which allows requests to the application be made until a certain limit has been reached for a specific time period. By utilizing rate-limit throttling within application can help to ensure that the database isn�t overwhelmed by one particular client who may be misusing the interface.,"https://apisecurity.io/encyclopedia/content/owasp/api4-lack-of-resources-and-rate-limiting.htm
https://cwe.mitre.org/data/definitions/770.html",Low,3.7,(,API,qt6gmb3C
122,Lack of Input Validation ,Unvalidated input,It was observed that the application accepts invalid characters as a input in the request.  ,"Lack of input validation at server-side may cause issues with business logic and may also affect the accuracy of data.
�����������������������������������������������������������������������OR
In addition to above impact, depend on the context of the application you can add the following sentence: 

An attacker could further exploit similar instance to perform attacks such as cross site scripting",,It is recommended that proper input validations should be performed at both server and client side in accordance with <<Client Name>>�s policy and business logic.,https://cwe.mitre.org/data/definitions/20.html,Low,2.6,(CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:N/A:N),API,qt6gmb3C
123,Malformed XML Injection ,Unvalidated input,It was observed that crafted XML user-controllable input is accepted in the application. ,"An attacker could gain unauthorized access to data, bypassing authentication or  the front-end application for direct XML database access, and possibly alter database information.  ",,It is recommended that all user-controllable input must be validated and filtered for invalid characters as well as content that can be interpreted in the context of an XML data or a query.,"https://cwe.mitre.org/data/definitions/91.html 
https://www.owasp.org/index.php/XML_Security_Cheat_Sheet",Medium,5.1,(CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N),API,qt6gmb3C
124,Missing HTTP Security Headers,Security misconfiguration,"It was observed that the following HTTP header is missing in the application:
?	Content-Security-Policy: 
The �Content-Security-Policy� header, determines the type of resources and the origin of resources that the browser is allowed to load. This prevents untrusted content from being executed on the user browser.
?	X-XSS-Protection: 
The X-XSS-Protection response header is a mechanism supported by some web browsers to provide an additional layer of defense against reflected cross-site scripting attacks. The browser will either sanitize the malicious script or block the page from rendering when it receives the X-XSS-Protection header in a response.
?	X-Content-Type-Options: 
The X-Content-Type-Options header is a mechanism which prevents a web browser from overriding the MIME type indicated in the application's Content-Type response header.
?	HTTP Strict Transport Security (HSTS): 
The HTTP Strict Transport Security (HSTS) Header instructs the web browser to always load the site over HTTPS in order to mitigate the SSL stripping attack. The web browser also disallow the user from overriding certificate error warnings if this header is present.
?	Cache-Control Headers: 
The application does not disable browser content storage features, and therefore, sensitive information contained within web pages may be stored on a user�s computer. An attacker will be able to access files containing sensitive information from the temporary cache of the browser.
?	X-Frame-Options: 
The  application does not explicitly prevent or deny �Clickjacking� style attacks. �Clickjacking�, also known as a ""UI redress attack"", is an attack that aims at �hijacking� mouse clicks from unaware end-users in order to perform a set of malicious actions on the target site. This is done by placing a transparent overlay on top of the legitimate site in order to capture all user activity","?	Content-Security-Policy: 
A web browser that supports CSP, such as Chrome or Firefox, parses the header information and determines which sources are trusted or not based on the instruction sent in the header. This is basically an allow list approach which may consist of instructions like self (allowing inline scripts), specific domains, nonces or hashes that have to be present and valid in order for the content to be loaded. CSP can prevent cross-site scripting vulnerabilities, clickjacking, mixed content security issues, protocol downgrading and any other kind of code injection which is the result of the injection of untrusted content into a trusted resource�
?	X-XSS-Protection: 
A successful reflected cross-site scripting attack can inject a script to be executed in the victim's browser and there by fully compromising the user. The ""X-XSS-Protection"" header forces the XSS protection mechanism into Enable mode, even if disabled by the user. It acts as an additional layer of protection and reduces exposure to drive-by XSS attacks.
?	X-Content-Type-Options: 
MIME type sniffing is a standard functionality in browsers to find an appropriate way to render data where the HTTP headers sent by the server are either inconclusive or missing. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the intended content type. When the X-Content-Type-Options header is specified by an application, browsers will not perform MIME sniffing and will trust the Content-Type specified by the application.
?	HTTP Strict Transport Security (HSTS): 
Applications that do not utilize the ""HTTP Strict-Transport Security"" policy are more susceptible to SSL stripping attacks, a type of downgrade attack that is implemented as part of a Man-In-The-Middle attack, on the application. The SSL stripping attack forces a victim's browser to communicate with the application server in plain-text without HTTP encryption, allowing an attacker to intercept session management information and potentially hijack the session and exposing sensitive information and gaining access to unauthorized functionality.
?	Cache-Control:
Information cached by the web browser might be disclosed to attackers that gain remote or local access to a user's computer, allowing them to obtain sensitive information or information that might aid in additional attacks against the organization.
?	X-Frame-Options:
An attacker may use this security flaw to invisibly load the application in a malicious website and subsequently trick a user into clicking a link or button that is invisibly hidden above the application�s legitimate link or button; so as to �trick� the user into performing unintended actions. An attacker can perform Clickjacking attacks.",,"?	Content-Security-Policy: 
We recommend to set the Content-Security-Policy (CSP) header in each HTTP response with the appropriate directives defined to provide the browser with granular control over the resources loaded by the application. Please note that the directives ""unsafe-inline"", ""unsafe-eval"", ""data"" are considered insecure and must be used with extreme caution. 
The best practice is to implement CSP with following tags: 
Content-Security-Policy: default-src 'none'; script-src 'self'; connect-src 'self'; 
img-src 'self'; style-src 'self';   
Additionally, the usage of X-Content-Security-Policy is deprecated and is not recommended as the implementation is incomplete and not supported by all browsers.
?	X-XSS-Protection: 
We recommend the server to send the �X-XSS-Protection� header with the value �1� i.e. Enabled) on all outgoing responses. 
X-XSS-Protection: 1; mode=block 
?	X-Content-Type-Options:
We recommend to set the ""X-Content-Type-Options"" header to ""nosniff"" in the response. The X-Content-Type-Options header is a mechanism which prevents a web browser from overriding the MIME type indicated in the application's Content-Type response header. 
X-Content-Type-Options: nosniff
?	HTTP Strict-Transport-Security (HSTS):
We recommend to implement and enforce HTTPS for the entire site and add the following header to all HTTPS responses using the web/application server configuration (preferred) or by setting it using global code and filters:
Strict-Transport-Security max-age=31536000; includeSubDomains
?	X-Frame-Option:
We recommend implementing anti-Cross Frame Scripting (�CFS�) techniques to check if the application has been embedded in a third party website, before displaying the application. This is commonly known as �Frame Busting�. Additionally, it is recommended to add the �X-Frame-Options� header to the HTTP      response.
?	Cache-Control Headers: 
We recommend that the server impose directives that prevent caching of sensitive information. The following HTTP cache-control headers should be set:
Cache-Control: no-cache, no-store
Pragma: no-cache
Expires: -1",https://owasp.org/www-project-secure-headers/,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),API,qt6gmb3C
125,Path Attribute for Cookie is Set Incorrectly,Broken Authentication,It was observed that the �Path� attribute for Cookies is set incorrectly. Setting the 'Path' attribute to �/� denotes that the cookie is set to the root directory. This could allow an attacker to grab the authentication cookie sent to every application under the same domain.,"When the cookie is set to the root directory, the cookie is shared with all the directories present under the root directory (representing all application on that server). An attacker could exploit this vulnerability by stealing the cookie which is present by exploiting any other application or directories in that root directory.",,It is recommended that 'Path' attribute is set to the directory in which the application is present.,"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Domain_and_Path_Attributes
https://cwe.mitre.org/data/definitions/22.html",Low,3.4,(CVSS:3.0/AV:A/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N),API,qt6gmb3C
126,Sensitive Information Cached to Disk,Sensitive data exposure,Several pages and files which contain sensitive information are cached to disk. The application does not implement cache-control mechanisms to prevent browsers from caching information on the website. Certain files are cached in the temporary files folder of the browser.,An attacker will be able to access files containing sensitive information from the temporary cache of the browser.,,"It is recommended that the server impose directives that prevent caching of sensitive information. The following HTTP cache-control headers should be set:
?Cache-Control: no-cache, no-store
?Pragma: no-cache
?Expires: -1
",https://cwe.mitre.org/data/definitions/525.html ,Low,2.8,(CVSS:3.0/AV:L/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N),API,qt6gmb3C
127,Sensitive Information Passed Over GET Request ,Sensitive data exposure,"It was observed that the web server uses the GET method to process requests that contain sensitive information including birthdate, gender and occupation, which can expose that information through the browser�s history, Referrers, web logs, and other sources.","Any parameters passed in GET requests are both cached by the browser, and saved in web server log files, making it easy for unauthorized users to discover sensitive information. An attacker could conduct man-in-the-middle attacks to gain unauthorized access to the web application. Unauthorised users or an attacker can gain access to another user account using publicly exposed credentials which leads to compromise of critical information and infrastructure and also to loss of business reputation.",,It is recommended that the web application should be configured to ensure that form submission and transfer of sensitive data are done only through HTTP POST request. ,"https://owasp-aasvs.readthedocs.io/en/latest/requirement-9.3.html
https://cwe.mitre.org/data/definitions/598.html
https://cwe.mitre.org/data/definitions/200.html
",Medium,4.7,(CVSS:3.0/AV:L/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N),API,qt6gmb3C
128,Session Cookie Attributes are Set Incorrectly  ,Broken Authentication,"It was observed that the application does not have HTTPOnly flag set for its session cookies. Session cookie for the application was not set with the �Secure� flag and may be sent in clear text when a user surfs to non-HTTPS links within the application. When a cookie is set without the �Secure"" flag, the browser can send the cookie unencrypted to the same domain.

It was also observed that the �Path� attribute for Cookies is set incorrectly. Setting the 'Path' attribute to �/� denotes that the cookie is set to the root directory. This could allow an attacker to grab the authentication cookie sent to every application under the same domain.","If HTTPOnly flag is not set, an attacker can inject client-side scripts into the application, execute cross site scripting attacks and steal user session cookie. Not setting the secure flag causes the cookie to be transmitted in clear text. It may be possible for an attacker to exploit this issue to steal the session cookie.

When the cookie is set to the root directory, the cookie is shared with all the directories present under the root directory (representing all application on that server). An attacker could exploit this vulnerability by stealing the cookie which is present by exploiting any other application or directories in that root directory.",,"It is recommended that �HTTPOnly� flag should be set on all cookies that are used for transmitting sensitive Data.
It is recommended to mark all session ID cookies as �Secure� to ensure that cookies containing sensitive data are not sent in clear text. The �Secure� parameter is a flag indicating that a cookie should only be used under a secure server condition, such as SSL. This flag usually defaults to FALSE and needs to be set as TRUE.
It is recommended that 'Path' attribute is set to the directory in which the application is present. ","https://www.owasp.org/index.php/SecureFlag
https://cwe.mitre.org/data/definitions/614.html
https://cwe.mitre.org/data/definitions/22.html
https://www.owasp.org/index.php/HTTPOnly
https://cwe.mitre.org/data/definitions/1004.html

",Low,3.7,(CVSS:3.0/AV:A/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N),API,qt6gmb3C
129,Spoofable client IP address,Security misconfiguration,It was observed that at the server accepts IP address included X-Forward-For header and replaced the IP address displayed in error message.,"The spoofed IP address can help an attacker to hide their true attacking address, generating misleading error message in the server.",,"The server should not rely on HTTP request headers such as X-Forwarded-For, True-Client-IP, and X-Real-IP to retrieve client IP address. An alternative method of identifying clients should be used.",https://cwe.mitre.org/data/definitions/16.html,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N),API,qt6gmb3C
130,Technical Information revealed in Error message/Information Disclosure through error messages,Security misconfiguration,It was observed that the web service exposes technical information within error messages.,Detailed error messages allow an attacker to enumerate the exact cause of the error that is occurring and make it significantly easier to detect and exploit certain vulnerabilities.,,"Configure a customized and generic error page giving minimal information to the users.
Use a global error handler to capture all unhandled exceptions and which is only accessible to system/application administrators.
",https://cwe.mitre.org/data/definitions/209.html,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),API,qt6gmb3C
131,"TLS/SSL 
Implementation Issues",Broken Authentication,"The web server allows for clients to use <<TLSV1.0, TLSv1.1 and TLS 1.2>> protocol. The following deficiencies were also found in the encrypted communication configuration:

<<please remove the vulnerability which is not vulnerable in your application>>

Insecure Client-initiated Renegotiation 
TLS renegotiation is a mechanism which allows the server or client to trigger a new handshake during an ongoing TLS connection, and has been identified with a design flaw that allows an attacker to inject data at the beginning of a connection, allowing the hijacking of the TLS connection and facilitating a man-in-the-middle attack.

SWEET32 Vulnerability: 
SWEET32 uses collision or �birthday� attack against 64-bits DES/3DES ciphers in CBC mode to decrypt sensitive information like session cookie, by sending large amount of data over a single SSL/TLS session. 

BREACH attack:
The web application is potentially vulnerable to the BREACH attack (Browser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext) as the server supports the use of HTTP compression.

Weak ciphers supported: 
The web server accepts weak ciphers with protocol weaknesses or low-grade encryption with key sizes that are less than 128 bits. It was observed that the following weak ciphers were supported by the server:
� <<mention the weak ciphers>>

BEAST (Browser Exploit Against SSL/TLS) attack:
The BEAST attack is a form of plaintext recovery where, given a large number of cipher texts, a portion of the plaintext can be recovered with a high probability due to the flawed generation of pseudorandom IV's in CBC ciphers used in TLS v1.0 and earlier.

ROBOT
The Return Of Bleichenbacher's Oracle Threat (ROBOT) Attack is a variation of the classic Bleichenbacher attack against RSA - which is one of the encryption methods used by TLS.


LUCKY13 attack:
The Lucky Thirteen attack is a cryptographic timing attack against implementations of the Transport Layer Security (TLS) protocol that use the CBC mode of operation.   After the 13-byte headers in the TLS MAC calculations, the process will theoretically allow man-in-the-middle attacks against SSL-protected communications.

Logjam attack:
The remote server supports DHE ciphers which make�s server vulnerable to logjam attack due its weak cryptography algorithm. The Logjam attack allows a man-in-the-middle attacker to downgrade vulnerable TLS connections to 512-bit export-grade cryptography

POODLE (SSLv3)
The POODLE attack (Padding Oracle on Downgraded Legacy Encryption) exploits a vulnerability in the SSL 3.0 protocol (CVE-2014-3566). It exploits protocol fallback from TLS to SSL 3.0 to reveal information from encrypted HTTPS communication.

Invalid SSL Certificate
It was observed that the SSL certificate used by <<Specify the web application>>  was expired and self-signed.

Weak hashing algorithm:
The remote server uses an SSL certificate chain that has been signed using a cryptographically weak hashing algorithm (e.g. MD2, MD4, MD5, or SHA1) known to be vulnerable to collision attacks.","Insecure Client-initiated Renegotiation:
An attacker may be able to exploit the insecure renegotiation process to execute man-in-the-middle attacks by injecting an arbitrary amount of plaintext into the beginning of the conversation the client has with the web server. The injected text could be used to compromise the integrity of the request submitted. 
In addition, the computational requirements for renegotiating a connection are asymmetrical between the client and the server, with more server utilization. Since the remote host does not appear to limit the number of renegotiations for a single TLS/SSL connection, this permits an attacker to open several simultaneous connections and repeatedly renegotiate them, possibly leading to a denial of service condition.

SWEET32 Vulnerability: 
An attacker who is able to send arbitrary HTTP requests on behalf of the user by controlling the user�s browser and have the ability to sniff the  HTTPS response, is then able to decrypt one block of the encrypted message within 232  attacker-controlled requests. 

BREACH attack:
An attacker who is able to inject chosen plaintext into the victim�s web request can potentially extract login tokens, email addresses and other sensitive information from the compressed HTTPS response by observing the length of the compressed HTTPS responses.

BEAST (Browser Exploit Against SSL/TLS) attack:
An attacker who is able to send arbitrary HTTP requests on behalf of the user by controlling the user�s browser and have the ability to sniff the  HTTPS response, is then able to make guesses about what plaintext looks like. Although the attacker cannot decrypt any data, he can find out if his guesses are right or wrong. And with a large enough number of guesses, a significant amount of data can be uncovered.

ROBOT:
A successful attack permits an attacker to decrypt the communication between a user and a server if this communication was encrypted with an RSA cipher. Furthermore, the attacker could create and sign any message using the server's private key.


LUCKY13 attack:
Attackers would measure the time it takes to encrypt records when using the standard CBC cipher suite used in TLS sessions. An attacker would then be able to recover plain text from TLS connections that use CBC mode encryption.

Logjam attack:
The Logjam attack allows a man-in-the-middle attacker to downgrade vulnerable TLS connections to 512-bit export-grade cryptography. This allows the attacker to read and modify any data passed over the connection. 


POODLE Attack
An attacker using a Man-In-The-Middle attack can force browser to downgrade to SSL 3.0 (an older protocol) instead of using the much more modern TLS (Transport Layer Security), and then exploit a security hole in SSL to hijack sessions

Invalid SSL Certificate
An attacker can exploit this to generate another certificate with the same digital signature, allowing an attacker to masquerade as the affected service. When a certificate is invalid, it could allow an attacker to spoof a trusted entity by using a man-in-the-middle (MITM) attack. The web application could connect to a malicious host while believing it is a trusted host and could be deceived into accepting spoofed data that appears to originate from a trusted host

Weak Hashing algorithm Used 
Certificates should use SHA-256 for the hashing algorithm, rather than the older MD5 and SHA-1 algorithms. These have a number of cryptographic weaknesses, and are not trusted by modern browsers.",,"It is recommended to limit the number of client renegotiation attempts to an acceptable threshold which does not affect the server performance.
Configure the server to disable client-initiated SSL renegotiation attempts.
Disable support for cryptographic protocols with known vulnerabilities and the server should enforce the use of TLSv1.2. 
It is recommended that that weak or low grade ciphers and CBC ciphers must be disabled on the server.
It is also recommended to disable HTTP compression (not the TLS compression). If HTTP compression is required, it is recommended to add random bytes to the HTTP responses in order to hide the actual compressed length.
Obtain and install a new SSL certificate issued from a trusted certificate authority to secure the communication between end-users and the web application.
Note: It is assumed that the SSL certificate in use on the UAT environment is similar to the one in the production environment.
Deploy (Ephemeral) Elliptic-Curve Diffie-Hellman (ECDHE)
Generate a Strong, Unique Diffie Hellman Group
Enable TLS_FALLBACK_SCSV extension, which prevents attackers from forcing protocol downgrade and inducing browsers to use SSL 3.0

Harden the affected servers' cipher suites to avoid the use of weak ciphers, in accordance with the vendor's security best practices. Reconfigure the server to accept industry standard cipher suites only. Prevent the server from honouring client-initiated session renegotiations. Enable the support for forward secrecy.
Contact your Certificate Authority to renew the SSL certificate.","https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet
https://nvd.nist.gov/vuln/detail/CVE-2013-0169
https://cwe.mitre.org/data/definitions/310.html
https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",Medium,4.2,(CVSS:3.0/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N),API,qt6gmb3C
132,Unauthenticated API Calls,Broken Authentication,It was observed that Certain API Endpoints can be accessed without proper authentication tokens which expose sensitive information to un-verified users.,Any attacker with knowledge of the API call and its parameters can easily request sensitive information only privy to authorized users without any proper validation or credentials.,,It is recommended to enforce authorization checks for every API Calls to prevent any malicious user from exposing sensitive information.,https://cwe.mitre.org/data/definitions/306.html,High,7.5,(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N),API,qt6gmb3C
133,User Controlled Error Message Displayed,Security misconfiguration,It was observed that the application displays default server error message which is vulnerable to content spoofing.,"When an application does not properly handle user supplied data, an attacker can supply content to a web application, typically via a parameter value, that is reflected back to the user. This presents the user with a modified page under the context of the trusted domain to trick users.",,It is recommended that to configure a customized and generic error page instead of reflecting the user input back in the page to prevent text-based content spoofing attacks. ,https://owasp.org/www-community/attacks/Content_Spoofing,Low,3.1,(CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N),API,qt6gmb3C
134,Vulnerable Version of Software in Use ,Using components with known vulnerabilities,"It was observed that the remote web server uses the following vulnerable third party library and server. 
? Mention the list of vulnerable version of framework/server
The vulnerable server/third party library are associated with various published vulnerabilities 
<< please mention related to the vulnerable version of software - including Cross Site Scripting, Code Execution, Directory Traversal that could be exploited by attackers.>>
",An attacker could determine vulnerabilities associated with the vulnerable software version and launch version-specific attacks.,,"It is recommended that any installed software and/or services on the server should be regularly patched and upgraded to the latest version, after the patches and software has been tested on development environment.","Mention the reference for the corresponding vulnerable version
",Medium,5.3,(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L),API,qt6gmb3C
135,WSDL  Exposed over Internet ,Security misconfiguration,It was observed that the  Definition Language was exposed over external network.  ,A malicious user could attack the  if any sensitive information is available in the WSDL document.  ,,"It is recommended to remove the WSDL and the related files from the server. If WSDL is required, restrict its exposure over the Internet.  ",http://www.ws-attacks.org/index.php/WSDL_Disclosure   ,Low,3.7,(CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N),API,qt6gmb3C
